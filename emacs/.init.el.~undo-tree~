(undo-tree-save-format-version . 1)
"3db943e933a81be5826d15c593a68a3e4f6b3df7"
[nil nil nil nil (25328 22574 568709 568000) 0 nil]
([nil nil ((nil rear-nonsticky nil 5197 . 5198) (nil fontified nil 5175 . 5198) (5175 . 5198) (t 25328 21946 598246 432000)) nil (25328 22574 568705 598000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5220 . 5221) (nil fontified nil 5198 . 5221) (5198 . 5221) 5197) nil (25328 22574 568698 963000) 0 nil])
([nil nil ((#("(setq neo-smart-open t)" 0 1 (fontified nil) 1 5 (face font-lock-keyword-face fontified nil) 5 22 (fontified nil) 22 23 (rear-nonsticky nil fontified nil)) . 5198) (undo-tree-id4 . -23) (undo-tree-id5 . -22) (undo-tree-id6 . -22) (undo-tree-id7 . 1) (undo-tree-id8 . -23) (undo-tree-id9 . 23) (undo-tree-id10 . -1) (nil rear-nonsticky t 5220 . 5221)) nil (25328 22574 568690 793000) 0 nil])
([nil nil ((5198 . 5199) 5197) nil (25328 22574 568664 868000) 0 nil])
([nil nil ((5199 . 5200)) nil (25328 22574 568661 201000) 0 nil])
([nil nil ((5200 . 5221)) nil (25328 22574 568657 991000) 0 nil])
([nil nil ((5221 . 5222)) nil (25328 22574 568654 648000) 0 nil])
([nil nil ((5222 . 5225)) nil (25328 22574 568651 651000) 0 nil])
([nil nil ((5225 . 5234)) nil (25328 22574 568648 604000) 0 nil])
([nil nil ((5234 . 5237)) nil (25328 22574 568645 506000) 0 nil])
([nil nil ((5237 . 5244)) nil (25328 22574 568642 341000) 0 nil])
([nil nil ((5244 . 5247)) nil (25328 22574 568639 78000) 0 nil])
([nil nil ((5247 . 5256)) nil (25328 23909 891508 843000) 0 nil])
([nil nil ((#(" u" 0 1 (fontified t) 1 2 (fontified t)) . 5254)) ((5254 . 5256)) (25328 23910 427336 246000) 0 nil])
([nil nil ((5254 . 5265)) ((#("-undo-tree-" 0 11 (fontified t)) . 5254) (undo-tree-id639 . -11) (undo-tree-id640 . -11) (undo-tree-id641 . -11) (undo-tree-id642 . -11) (undo-tree-id643 . -11) (undo-tree-id644 . -11) (undo-tree-id645 . -11) (undo-tree-id646 . -11) (undo-tree-id647 . -11) (undo-tree-id648 . -11) (undo-tree-id649 . -11) (undo-tree-id650 . -11) (undo-tree-id651 . -11)) (25328 23910 608093 617000) 0 nil])
([nil nil ((5265 . 5271)) ((#("mode))" 0 6 (fontified t)) . 5265) (undo-tree-id638 . -6)) (25328 23910 758978 4000) 0 (:register 107)])
([nil nil ((5271 . 5273)) ((#("
" 0 1 (fontified nil)) . 5271) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (#("
" 0 1 (fontified nil)) . 5272) (undo-tree-id629 . 1)) (25328 23910 918300 989000) 0 nil] [nil nil ((5281 . 5282) (1310 . 1626) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 19 (fontified nil) 19 22 (face font-lock-comment-delimiter-face fontified nil) 22 60 (face font-lock-comment-face fontified nil) 60 61 (fontified nil) 61 64 (face font-lock-comment-delimiter-face fontified nil) 64 125 (face font-lock-comment-face fontified nil) 125 126 (fontified nil) 126 129 (face font-lock-comment-delimiter-face fontified nil) 129 183 (face font-lock-comment-face fontified nil) 183 184 (fontified nil) 184 187 (face font-lock-comment-delimiter-face fontified nil) 187 201 (face font-lock-comment-face fontified nil) 201 237 (face font-lock-comment-face fontified nil) 237 266 (fontified nil) 266 274 (face font-lock-builtin-face fontified nil) 274 300 (fontified nil) 300 307 (face font-lock-builtin-face fontified nil) 307 316 (fontified nil)) . 1310) (1270 . 1309) (#("
" 0 1 (fontified nil)) . 1270) (1157 . 1271) (#(" " 0 1 (fontified nil)) . 1157) (884 . 1158) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 23 (fontified nil) 23 26 (face font-lock-comment-delimiter-face fontified nil) 26 68 (face font-lock-comment-face fontified nil) 68 69 (fontified nil) 69 72 (face font-lock-comment-delimiter-face fontified nil) 72 133 (face font-lock-comment-face fontified nil) 133 134 (fontified nil) 134 137 (face font-lock-comment-delimiter-face fontified nil) 137 191 (face font-lock-comment-face fontified nil) 191 192 (fontified nil) 192 195 (face font-lock-comment-delimiter-face fontified nil) 195 245 (face font-lock-comment-face fontified nil) 245 415 (fontified nil)) . 884)) ((884 . 1299) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages " 0 245 (fontified nil) 245 248 (fontified nil) 248 273 (fontified nil) 273 274 (fontified nil)) . 884) (1157 . 1158) (#("
   '(undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package)
" 0 1 (fontified nil) 1 4 (fontified nil) 4 113 (fontified nil) 113 114 (fontified nil)) . 1157) (1270 . 1271) (#(")
 '(warning-suppress-types '((comp))))" 0 39 (fontified nil)) . 1270) (1310 . 1626) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . 1310) (#("
" 0 1 (fontified t)) . 5281) (undo-tree-id387 . 1) (t . 0)) (25328 22680 996952 371000) 0 nil])
([nil nil ((5299 . 5305) (#(" " 0 1 (fontified nil)) . 5298) (5294 . 5300) (#("th" 0 1 (fontified nil) 1 2 (fontified nil)) . 5294) (5291 . 5296) (#("e" 0 1 (fontified nil)) . 5291) (5285 . 5292) (#("e " 0 1 (fontified nil) 1 2 (fontified nil)) . 5285) (5282 . 5287) (#("irt" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 5282) (5277 . 5285) (#("t" 0 1 (fontified nil)) . 5277) (5273 . 5278)) ((#("now t" 0 4 (fontified nil) 4 5 (fontified nil)) . 5273) (5277 . 5278) (#("Iam wirt" 0 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil)) . 5277) (5282 . 5285) (#("rite " 0 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil)) . 5282) (5285 . 5287) (#("ing soe" 0 6 (fontified nil) 6 7 (fontified nil)) . 5285) (5291 . 5292) (#("me th" 0 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil)) . 5291) (5294 . 5296) (#("shit " 0 4 (fontified nil) 4 5 (fontified nil)) . 5294) (#("
" 0 1 (fontified nil)) . 5299) (5298 . 5299) (#("





" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil)) . 5299)) (25328 23911 862287 911000) 0 nil])
([nil nil ((5281 . 5283) (t . 0)) ((#("

" 0 1 (fontified t) 1 2 (fontified t)) . 5281) (undo-tree-id376 . -2) (undo-tree-id377 . -2) (undo-tree-id378 . -2) (undo-tree-id379 . -2) (undo-tree-id380 . -2) (undo-tree-id381 . -2) (undo-tree-id382 . -2) (undo-tree-id383 . -2) (undo-tree-id384 . -2) (undo-tree-id385 . -2) (undo-tree-id386 . -2)) (25328 22680 149357 612000) 0 nil])
([nil nil ((5300 . 5307)) ((#("






" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t)) . 5300) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1)) (25328 23912 242166 894000) 0 nil])
([nil nil ((5283 . 5288)) ((#("sdkfs" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . 5283) (undo-tree-id341 . -5) (undo-tree-id342 . -5) (undo-tree-id343 . -5) (undo-tree-id344 . -5) (undo-tree-id345 . -5) (undo-tree-id346 . -5) (undo-tree-id347 . -5) (undo-tree-id348 . -5) (undo-tree-id349 . -5) (undo-tree-id350 . -5) (undo-tree-id351 . -5) (undo-tree-id352 . -5) (undo-tree-id353 . -5) (undo-tree-id354 . -5) (undo-tree-id355 . -5) (undo-tree-id356 . -5) (undo-tree-id357 . -5) (undo-tree-id358 . -5) (undo-tree-id359 . -5) (undo-tree-id360 . -5) (undo-tree-id361 . -5) (undo-tree-id362 . -5) (undo-tree-id363 . -5) (undo-tree-id364 . -5) (undo-tree-id365 . -5) (undo-tree-id366 . -5) (undo-tree-id367 . -5) (undo-tree-id368 . -5) (undo-tree-id369 . -5) (undo-tree-id370 . -5) (undo-tree-id371 . -5) (undo-tree-id372 . -5) (undo-tree-id373 . -5) (undo-tree-id374 . -5) (undo-tree-id375 . -5)) (25328 22679 937903 838000) 0 nil])
([nil nil ((5300 . 5312)) ((#("function () " 0 12 (fontified t)) . 5300)) (25328 23912 395202 805000) 0 nil])
([nil nil ((5288 . 5289)) ((#("f" 0 1 (fontified t)) . 5288) (undo-tree-id325 . -1) (undo-tree-id326 . 1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1)) (25328 22674 893993 50000) 0 nil])
([nil nil ((5312 . 5315)) ((#("{" 0 1 (fontified nil)) . 5312) (#("
" 0 1 (fontified nil)) . 5313) (#("}" 0 1 (fontified nil)) . 5314)) (25328 23912 595306 650000) 0 nil])
([nil nil ((5289 . 5297)) ((#("
salalsl" 0 1 (fontified t) 1 8 (fontified t)) . 5289)) (25328 22674 337975 341000) 0 nil] [nil nil ((5283 . 5294) (#("f" 0 1 (fontified nil)) . 5283) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . 1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (#("sdkfs=" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil)) . 5283) (5288 . 5289)) ((#("=" 0 1 (fontified nil)) . 5288) (5283 . 5289) (5283 . 5284) (#("ahmed salah" 0 11 (fontified t)) . 5283)) (25328 22672 542582 46000) 0 nil])
([nil nil ((5314 . 5315)) ((#("
" 0 1 (fontified nil)) . 5314)) (25328 23912 619533 669000) 0 nil])
([nil nil ((5289 . 5290)) ((#("
" 0 1 (fontified t)) . 5289) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1)) (25328 22666 24850 759000) 0 nil])
nil
([nil nil ((5367 . 5384) (#(" " 0 1 (fontified nil)) . 5367) (5365 . 5368) (#("cn" 0 1 (fontified nil) 1 2 (fontified nil)) . 5365) (5357 . 5367) (#("o" 0 1 (fontified nil)) . 5357) (5357 . 5358) (#("ou" 0 1 (fontified nil) 1 2 (fontified nil)) . 5357) (5356 . 5359) (#("c" 0 1 (fontified nil)) . 5356) (5349 . 5357) (#(" " 0 1 (fontified nil)) . 5348) (5325 . 5350) (#("h" 0 1 (fontified nil)) . 5325) (5314 . 5326)) ((#("this is anoh" 0 11 (fontified nil) 11 12 (fontified nil)) . 5314) (5325 . 5326) (#("ther branch in the tree 
" 0 21 (fontified nil) 21 23 (fontified nil) 23 24 (fontified nil) 24 25 (fontified nil)) . 5325) (5348 . 5349) (#("the prec" 0 7 (fontified nil) 7 8 (fontified nil)) . 5349) (5356 . 5357) (#("vou" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 5356) (5357 . 5359) (#("o" 0 1 (fontified nil)) . 5357) (5357 . 5358) (#("ious bracn" 0 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil)) . 5357) (5365 . 5367) (#("nc " 0 2 (fontified nil) 2 3 (fontified nil)) . 5365) (5367 . 5368) (#("h didn't go away;" 0 16 (fontified nil) 16 17 (face font-lock-comment-delimiter-face fontified nil)) . 5367)) (25328 23912 647312 343000) 0 nil] [nil nil ((5314 . 5315) (#("
" 0 1 (fontified t)) . 5314)) ((5314 . 5315) (#("
" 0 1 (fontified t)) . 5314)) (25328 23221 571537 656000) 0 nil])
([nil nil ((5299 . 5300)) ((#("
" 0 1 (fontified t)) . 5299) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1)) (25328 22649 748751 857000) 0 nil] [nil nil ((5290 . 5294)) ((#("dfsl" 0 4 (fontified t)) . 5290) (undo-tree-id217 . -3) (undo-tree-id218 . -3) (undo-tree-id219 . -3) (undo-tree-id220 . -3) (undo-tree-id221 . -3)) (25328 22638 942614 135000) 0 nil])
([nil nil ((5384 . 5403)) ((#("

doo some changes " 0 1 (face font-lock-comment-face fontified nil) 1 2 (fontified nil) 2 19 (fontified nil)) . 5384)) (25328 23912 676324 134000) 0 nil])
([nil nil ((5332 . 5341) (#("  " 0 2 (fontified nil)) . 5314) (5320 . 5334) (#("e" 0 1 (fontified nil)) . 5320) (5316 . 5321) (#(" " 0 1 (fontified nil)) . 5316) (5314 . 5317) (#("dsfs" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 5314) (undo-tree-id3853 . -4) (undo-tree-id3854 . -4) (undo-tree-id3855 . -4) (undo-tree-id3856 . -4) (5313 . 5318) (#("\\" 0 1 (fontified nil)) . 5313) (undo-tree-id3857 . -1) (5313 . 5314) (#("
" 0 1 (fontified t)) . 5313) (undo-tree-id3858 . -1) (undo-tree-id3859 . -1) (undo-tree-id3860 . -1) (undo-tree-id3861 . -1) (undo-tree-id3862 . -1) (undo-tree-id3863 . -1) (undo-tree-id3864 . -1) (undo-tree-id3865 . -1) (undo-tree-id3866 . -1) (undo-tree-id3867 . -1) (undo-tree-id3868 . -1) (undo-tree-id3869 . -1) (undo-tree-id3870 . -1) (undo-tree-id3871 . -1) (undo-tree-id3872 . -1) (undo-tree-id3873 . -1) (undo-tree-id3874 . -1) (undo-tree-id3875 . -1)) ((5313 . 5314) (#("\\" 0 1 (fontified nil)) . 5313) (undo-tree-id3876 . -1) (5313 . 5314) (#("
dsfs" 0 1 (fontified t) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil)) . 5313) (undo-tree-id3877 . -5) (undo-tree-id3878 . -1) (undo-tree-id3879 . -5) (undo-tree-id3880 . -5) (undo-tree-id3881 . -5) (undo-tree-id3882 . -1) (undo-tree-id3883 . -1) (undo-tree-id3884 . -1) (undo-tree-id3885 . -1) (undo-tree-id3886 . -1) (undo-tree-id3887 . -1) (undo-tree-id3888 . -1) (undo-tree-id3889 . -1) (undo-tree-id3890 . -1) (undo-tree-id3891 . -1) (undo-tree-id3892 . -1) (undo-tree-id3893 . -1) (undo-tree-id3894 . -1) (undo-tree-id3895 . -1) (undo-tree-id3896 . -1) (undo-tree-id3897 . -1) (undo-tree-id3898 . -1) (undo-tree-id3899 . -1) (5314 . 5318) (#("   " 0 2 (fontified nil) 2 3 (fontified nil)) . 5314) (undo-tree-id3900 . -2) (undo-tree-id3901 . -2) (undo-tree-id3902 . -2) (undo-tree-id3903 . -2) (undo-tree-id3904 . -2) (5316 . 5317) (#("write" 0 4 (fontified nil) 4 5 (fontified nil)) . 5316) (undo-tree-id3905 . -4) (undo-tree-id3906 . -4) (undo-tree-id3907 . -4) (undo-tree-id3908 . -4) (undo-tree-id3909 . -4) (5320 . 5321) (#("ing some code
" 0 13 (fontified nil) 13 14 (fontified nil)) . 5320) (undo-tree-id3910 . -14) (undo-tree-id3911 . -14) (undo-tree-id3912 . -14) (undo-tree-id3913 . -14) (undo-tree-id3914 . -14) (5314 . 5316) (#("in macs

" 0 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t)) . 5332)) (25328 23221 410771 736000) 0 nil])
([nil nil ((5300 . 5308)) ((#("sdkfaslf" 0 8 (fontified t)) . 5300)) (25328 22648 985909 873000) 0 nil])
nil
([nil nil ((5406 . 5422)) ((#("
do some chagnes" 0 1 (fontified nil) 1 15 (fontified nil) 15 16 (fontified nil)) . 5406)) (25328 23912 779701 989000) 0 nil])
([nil nil ((5314 . 5315)) ((#("
" 0 1 (fontified t)) . 5314)) (25328 23220 639228 746000) 0 nil])
nil
([nil nil ((5421 . 5422)) ((#("u" 0 1 (fontified nil)) . 5421)) (25328 23912 809100 882000) 0 nil])
nil
([nil nil ((5421 . 5425)) ((#("jjkk" 0 4 (fontified nil)) . 5421)) (25328 23912 851637 499000) 0 nil])
([nil nil ((5425 . 5426)) ((#("k" 0 1 (fontified nil)) . 5425)) (25328 23912 877894 916000) 0 nil])
([nil nil ((5426 . 5434)) ((#("kkkjjkjk" 0 8 (fontified nil)) . 5426)) (25328 23912 904101 66000) 0 nil])
([nil nil ((#("now Iam writing some shit

function () {
this is another branch in the tree
the previous branch didn't go away;

doo some changes 
}

do some chagnejjkkkkkkjjkjkus










" 0 4 (fontified t) 4 9 (fontified t) 9 12 (fontified t) 12 18 (fontified t) 18 21 (fontified t) 21 25 (fontified t) 25 26 (fontified t) 26 27 (fontified t) 27 39 (fontified t) 39 40 (fontified t) 40 41 (fontified t) 41 52 (fontified t) 52 73 (fontified t) 73 75 (fontified t) 75 76 (fontified t) 76 83 (fontified t) 83 84 (fontified t) 84 92 (fontified t) 92 94 (fontified t) 94 110 (fontified t) 110 111 (face font-lock-comment-delimiter-face fontified t) 111 112 (face font-lock-comment-face fontified t) 112 113 (fontified t) 113 130 (fontified t) 130 131 (fontified t) 131 132 (fontified t) 132 133 (fontified t) 133 134 (fontified t) 134 148 (fontified t) 148 152 (fontified t) 152 153 (fontified t) 153 161 (fontified t) 161 162 (fontified t) 162 163 (fontified t) 163 164 (fontified t) 164 165 (fontified t) 165 166 (fontified t) 166 167 (fontified t) 167 168 (fontified t) 168 169 (fontified t) 169 170 (fontified t) 170 171 (fontified t) 171 172 (fontified t) 172 173 (fontified t) 173 174 (fontified t)) . 5273) (undo-tree-id657 . -153) (undo-tree-id658 . -153) (undo-tree-id659 . -113) (undo-tree-id660 . -111) (undo-tree-id661 . -111) (undo-tree-id662 . -111) (undo-tree-id663 . -111) (undo-tree-id664 . -111) (undo-tree-id665 . -133) (undo-tree-id666 . -133) (undo-tree-id667 . -133) (undo-tree-id668 . -133) (undo-tree-id669 . -133) (undo-tree-id670 . -148) (undo-tree-id671 . -148) (undo-tree-id672 . -148) (undo-tree-id673 . -148) (undo-tree-id674 . -148) (undo-tree-id675 . -148) (undo-tree-id676 . -148) (undo-tree-id677 . -148) (undo-tree-id678 . -148) (undo-tree-id679 . -148) (undo-tree-id680 . -152) (undo-tree-id681 . -152) (undo-tree-id682 . -152) (undo-tree-id683 . -152) (undo-tree-id684 . -152) (undo-tree-id685 . -153) (undo-tree-id686 . -153) (undo-tree-id687 . -153) (undo-tree-id688 . -153) (undo-tree-id689 . -153)) ((5273 . 5447)) (25328 23912 934980 346000) 0 nil])
([nil nil ((5273 . 5276)) ((#("lll" 0 3 (fontified nil)) . 5273)) (25328 23912 959746 277000) 0 nil])
([nil nil ((#("lll" 0 3 (fontified t)) . 5273)) ((5273 . 5276)) (25328 23912 984071 971000) 0 nil])
([nil nil ((#("
(" 1 2 (fontified nil)) . 1988) (1989 . 1990) (#("O" 0 1 (fontified nil)) . 1989) (1989 . 1990) (1989 . 1990)) ((#("
" 0 1 (fontified nil)) . 1989) (#("O" 0 1 (fontified nil)) . 1989) (1989 . 1990) (#("(" 0 1 (fontified nil)) . 1989) (1988 . 1990)) (25328 23913 9376 689000) 0 nil])
([nil nil ((1869 . 1880) (#("u" 0 1 (fontified nil)) . 1869) (1845 . 1870)) ((#("
" 0 1 (fontified nil)) . 1845) (#("(setq" 0 1 (fontified nil) 1 5 (fontified nil face font-lock-keyword-face)) . 1846) (#(" evil-undo-system u" 0 18 (fontified nil) 18 19 (fontified nil)) . 1851) (1869 . 1870) (#("'undo-tree)" 0 1 (fontified nil) 1 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil)) . 1869)) (25328 23913 56143 897000) 0 nil])
([nil nil ((1880 . 1883)) ((#("
" 0 1 (fontified nil)) . 1880) (#("//" 0 2 (fontified nil)) . 1881)) (25328 23913 83087 612000) 0 nil])
([nil nil ((#("
//" 0 1 (fontified t) 1 3 (fontified t)) . 1880) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1)) ((1880 . 1883)) (25328 23913 113267 25000) 0 nil])
([nil nil ((#("all" 0 1 (face font-lock-string-face fontified nil) 1 2 (face font-lock-string-face fontified nil) 2 3 (face font-lock-string-face fontified nil)) . 1870) (1869 . 1873) (#("'" 0 1 (fontified t)) . 1869)) ((1869 . 1870) (#("\"all" 0 1 (face font-lock-string-face fontified nil) 1 2 (face font-lock-string-face fontified nil) 2 3 (face font-lock-string-face fontified nil) 3 4 (face font-lock-string-face fontified nil)) . 1869) (1870 . 1873)) (25328 23913 142334 714000) 0 nil])
([nil nil ((1879 . 1881)) ((#("\"\"" 0 1 (face font-lock-string-face fontified nil) 1 2 (face font-lock-string-face fontified nil)) . 1879)) (25328 23913 256586 651000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . 1880)) ((1880 . 1881)) (25328 23913 288213 179000) 0 nil])
([nil nil ((1881 . 1887)) ((#("
" 0 1 (fontified nil)) . 1881) (#("
" 0 1 (fontified nil)) . 1882) (#("dfsf" 0 4 (fontified nil)) . 1883)) (25328 23913 315348 142000) 0 nil])
([nil nil ((#("

dfsf" 0 1 (fontified t) 1 2 (fontified t) 2 6 (fontified t)) . 1881) (undo-tree-id697 . -2) (undo-tree-id698 . -2) (undo-tree-id699 . -2) (undo-tree-id700 . -2) (undo-tree-id701 . -2) (undo-tree-id702 . -2) (undo-tree-id703 . -2)) ((1881 . 1887)) (25328 23913 342497 703000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . 1879) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1)) ((1879 . 1880)) (25328 23913 369080 804000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . 1869)) ((1869 . 1870)) (25328 23913 395456 856000) 0 nil])
([nil nil ((1877 . 1879) (#("eo" 0 1 (fontified nil) 1 2 (fontified nil)) . 1877) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (1878 . 1879) (#(")" 0 1 (fontified t)) . 1878) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1)) ((1878 . 1879) (#("o" 0 1 (fontified nil)) . 1878) (1877 . 1879) (#("e)" 0 2 (fontified nil)) . 1877)) (25328 23913 424048 894000) 0 nil])
([nil nil ((#("undo-tree)" 0 8 (fontified t) 8 10 (fontified t)) . 1869) (undo-tree-id744 . -8) (undo-tree-id745 . -8) (undo-tree-id746 . -8) (undo-tree-id747 . -8) (undo-tree-id748 . -8) (undo-tree-id749 . -8) (undo-tree-id750 . -8) (undo-tree-id751 . -8) (undo-tree-id752 . -8) (undo-tree-id753 . -8) (undo-tree-id754 . -8) (undo-tree-id755 . -8) (undo-tree-id756 . -8) (undo-tree-id757 . -8) (undo-tree-id758 . -8) (undo-tree-id759 . -8) (undo-tree-id760 . -8) (undo-tree-id761 . -8) (undo-tree-id762 . -8) (undo-tree-id763 . -8) (undo-tree-id764 . -8) (undo-tree-id765 . -8) (undo-tree-id766 . -8) (undo-tree-id767 . -8) (undo-tree-id768 . -8) (undo-tree-id769 . -8) (undo-tree-id770 . -8) (undo-tree-id771 . -8) (undo-tree-id772 . -8) (undo-tree-id773 . -8) (undo-tree-id774 . -8) (undo-tree-id775 . -8)) ((1869 . 1879)) (25328 23913 454884 568000) 0 nil])
([nil nil ((1875 . 1880) (#("s" 0 1 (fontified nil)) . 1875) (1869 . 1876)) ((#("'undo-s" 0 6 (fontified nil) 6 7 (fontified nil)) . 1869) (1875 . 1876) (#("tree)" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil)) . 1875)) (25328 23913 493885 942000) 0 nil])
([nil nil ((1880 . 1884)) ((#("
sdf" 0 1 (fontified nil) 1 4 (fontified nil)) . 1880)) (25328 23913 520323 923000) 0 nil])
([nil nil ((#("sdf
" 0 3 (fontified t) 3 4 (fontified t)) . 1881)) ((1881 . 1885)) (25328 23913 548971 545000) 0 nil] [nil nil ((#("
sdf" 0 1 (fontified t) 1 4 (fontified t)) . 1880) (undo-tree-id4562 . -1) (undo-tree-id4563 . -1) (undo-tree-id4564 . -1) (undo-tree-id4565 . -1) (undo-tree-id4566 . -1) (undo-tree-id4567 . -1) (undo-tree-id4568 . -1) (undo-tree-id4569 . -1) (undo-tree-id4570 . -1) (undo-tree-id4571 . -1) (undo-tree-id4572 . -1) (undo-tree-id4573 . -1) (undo-tree-id4574 . -2) (undo-tree-id4575 . -2) (undo-tree-id4576 . -2) (undo-tree-id4577 . -2) (undo-tree-id4578 . -2) (undo-tree-id4579 . -3) (undo-tree-id4580 . -3) (undo-tree-id4581 . -3) (undo-tree-id4582 . -3) (undo-tree-id4583 . -3) (undo-tree-id4584 . -4) (undo-tree-id4585 . -4) (undo-tree-id4586 . -4) (undo-tree-id4587 . -4) (undo-tree-id4588 . -4) (undo-tree-id4589 . -4) (undo-tree-id4590 . -4) (undo-tree-id4591 . -4) (undo-tree-id4592 . -4) (undo-tree-id4593 . -4) (undo-tree-id4594 . -4) (undo-tree-id4595 . -4) (undo-tree-id4596 . -4) (undo-tree-id4597 . -4) (undo-tree-id4598 . -4) (undo-tree-id4599 . -4) (undo-tree-id4600 . -4) (undo-tree-id4601 . -4) (undo-tree-id4602 . -4) (undo-tree-id4603 . -4) (undo-tree-id4604 . -4) (undo-tree-id4605 . -4) (undo-tree-id4606 . -4) (undo-tree-id4607 . -4) (undo-tree-id4608 . -4) (undo-tree-id4609 . -4) (undo-tree-id4610 . -4) (undo-tree-id4611 . -4) (undo-tree-id4612 . -4) (undo-tree-id4613 . -4) (undo-tree-id4614 . -3) (undo-tree-id4615 . -3) (undo-tree-id4616 . -3) (undo-tree-id4617 . -3) (undo-tree-id4618 . -3) (undo-tree-id4619 . -3) (undo-tree-id4620 . -3) (undo-tree-id4621 . -3) (undo-tree-id4622 . -3) (undo-tree-id4623 . -3) (undo-tree-id4624 . -3) (undo-tree-id4625 . -3) (undo-tree-id4626 . -3) (undo-tree-id4627 . -3) (undo-tree-id4628 . -3) (undo-tree-id4629 . -1) (undo-tree-id4630 . -1) (undo-tree-id4631 . -1) (undo-tree-id4632 . -1) (undo-tree-id4633 . -1) (undo-tree-id4634 . -1) (undo-tree-id4635 . -1) (undo-tree-id4636 . -1) (undo-tree-id4637 . -1) (undo-tree-id4638 . -1) (undo-tree-id4639 . -1) (undo-tree-id4640 . -1) (undo-tree-id4641 . -1) (undo-tree-id4642 . -1) (undo-tree-id4643 . -1) (undo-tree-id4644 . -1) (undo-tree-id4645 . -1) (undo-tree-id4646 . -1) (undo-tree-id4647 . -1) (undo-tree-id4648 . -1) (undo-tree-id4649 . -1) (undo-tree-id4650 . -1)) ((1880 . 1884)) (25328 23434 841448 895000) 0 nil])
([nil nil ((5308 . 5322)) ((#("
" 0 1 (fontified nil)) . 5308) (#("
" 0 1 (fontified nil)) . 5309) (#("sjflslkfjsd " 0 12 (fontified nil)) . 5310)) (25328 23913 576101 770000) 0 nil])
nil
([nil nil ((#("

sjflslkfjsd " 0 1 (fontified t) 1 2 (fontified t) 2 14 (fontified t)) . 5308) (undo-tree-id776 . -2) (undo-tree-id777 . -2) (undo-tree-id778 . -2) (undo-tree-id779 . -2) (undo-tree-id780 . -2) (undo-tree-id781 . -2) (undo-tree-id782 . -2)) ((5308 . 5322)) (25328 23913 609674 846000) 0 nil])
([nil nil ((5308 . 5309)) ((#("
" 0 1 (fontified nil)) . 5308)) (25328 23913 651394 794000) 0 nil])
([nil nil ((5316 . 5329) (#("a" 0 1 (fontified nil)) . 5316) (5309 . 5317) (#("8se" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 5309) (5307 . 5312)) ((#("
" 0 1 (fontified nil)) . 5307) (undo-tree-id625 . 1) (#("(8se" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 5308) (5309 . 5312) (#("use-paca" 0 7 (face font-lock-keyword-face fontified nil) 7 8 (fontified nil)) . 5309) (5316 . 5317) (#("kage undo-fu)" 0 4 (face font-lock-keyword-face fontified nil) 4 5 (fontified nil) 5 12 (face font-lock-constant-face fontified nil) 12 13 (fontified nil)) . 5316)) (25328 23913 751538 726000) 0 nil])
([nil nil ((#("
  :config" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil face font-lock-builtin-face) 5 6 (fontified nil face font-lock-builtin-face) 6 7 (fontified nil face font-lock-builtin-face) 7 8 (fontified nil face font-lock-builtin-face) 8 9 (fontified nil face font-lock-builtin-face) 9 10 (fontified nil face font-lock-builtin-face)) . 5340) (5347 . 5350) (#("if" 0 1 (fontified nil face font-lock-builtin-face) 1 2 (fontified nil face font-lock-builtin-face)) . 5347) (5339 . 5349) (#("6" 0 1 (fontified nil)) . 5339) (5328 . 5340)) ((#("
  " 0 1 (fontified nil) 1 3 (fontified nil)) . 5328) (#(":ensure 6" 0 7 (face font-lock-builtin-face fontified nil) 7 8 (fontified nil) 8 9 (fontified nil)) . 5331) (5339 . 5340) (#("t" 0 1 (fontified nil)) . 5339) (#("
  " 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 5340) (#(":conif" 0 1 (fontified nil) 1 2 (fontified nil face font-lock-builtin-face) 2 3 (fontified nil face font-lock-builtin-face) 3 4 (fontified nil face font-lock-builtin-face) 4 5 (fontified nil face font-lock-builtin-face) 5 6 (fontified nil face font-lock-builtin-face)) . 5343) (5347 . 5349) (#("fig" 0 1 (fontified nil face font-lock-builtin-face) 1 2 (fontified nil face font-lock-builtin-face) 2 3 (fontified nil face font-lock-builtin-face)) . 5347) (5340 . 5350)) (25328 23913 780684 175000) 0 nil])
([nil nil ((1308 . 1624) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 19 22 (face font-lock-comment-delimiter-face) 22 60 (face font-lock-comment-face) 61 64 (face font-lock-comment-delimiter-face) 64 125 (face font-lock-comment-face) 126 129 (face font-lock-comment-delimiter-face) 129 183 (face font-lock-comment-face) 184 187 (face font-lock-comment-delimiter-face) 187 201 (face font-lock-comment-face) 201 237 (face font-lock-comment-face) 266 274 (face font-lock-builtin-face) 300 307 (face font-lock-builtin-face)) . 1308) (1268 . 1307) (#("
" 0 1 (fontified nil)) . 1268) (1157 . 1269) (#(" " 0 1 (fontified nil)) . 1157) (884 . 1158) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 23 26 (face font-lock-comment-delimiter-face) 26 68 (face font-lock-comment-face) 69 72 (face font-lock-comment-delimiter-face) 72 133 (face font-lock-comment-face) 134 137 (face font-lock-comment-delimiter-face) 137 191 (face font-lock-comment-face) 192 195 (face font-lock-comment-delimiter-face) 195 245 (face font-lock-comment-face)) . 884)) ((884 . 1299) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages " 0 23 (fontified nil) 23 26 (face font-lock-comment-delimiter-face fontified nil) 26 68 (face font-lock-comment-face fontified nil) 68 69 (fontified nil) 69 72 (face font-lock-comment-delimiter-face fontified nil) 72 133 (face font-lock-comment-face fontified nil) 133 134 (fontified nil) 134 137 (face font-lock-comment-delimiter-face fontified nil) 137 191 (face font-lock-comment-face fontified nil) 191 192 (fontified nil) 192 195 (fontified nil face font-lock-comment-delimiter-face) 195 245 (fontified nil face font-lock-comment-face) 245 273 (fontified nil) 273 274 (fontified nil)) . 884) (1157 . 1158) (#("
   '(undo-fu all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package)
" 0 111 (fontified nil) 111 112 (fontified nil)) . 1157) (1268 . 1269) (#(")
 '(warning-suppress-types '((comp))))" 0 2 (fontified nil) 2 39 (fontified nil)) . 1268) (1308 . 1624) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 19 (fontified nil) 19 22 (fontified nil face font-lock-comment-delimiter-face) 22 60 (fontified nil face font-lock-comment-face) 60 61 (fontified nil) 61 64 (fontified nil face font-lock-comment-delimiter-face) 64 125 (fontified nil face font-lock-comment-face) 125 126 (fontified nil) 126 129 (fontified nil face font-lock-comment-delimiter-face) 129 183 (fontified nil face font-lock-comment-face) 183 184 (fontified nil) 184 187 (fontified nil face font-lock-comment-delimiter-face) 187 193 (fontified nil face font-lock-comment-face) 193 237 (fontified nil face font-lock-comment-face) 237 266 (fontified nil) 266 274 (fontified nil face font-lock-builtin-face) 274 300 (fontified nil) 300 307 (fontified nil face font-lock-builtin-face) 307 316 (fontified nil)) . 1308) (t . 0)) (25328 23913 806205 402000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . 1884) (t . 0)) ((1884 . 1885)) (25328 23913 856125 806000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 1884)) ((1884 . 1885)) (25328 23913 901120 528000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 1883) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1)) ((1883 . 1884)) (25328 23913 932850 152000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 1883)) ((1883 . 1884)) (25328 23913 960337 676000) 0 nil])
([nil nil ((1883 . 1885)) ((#("fu" 0 2 (fontified nil)) . 1883)) (25328 23913 985513 115000) 0 nil])
([nil nil ((1886 . 1893)) ((#("
" 0 1 (fontified nil)) . 1886) (#("dfasff" 0 6 (fontified nil)) . 1887)) (25328 23914 12739 116000) 0 nil])
([nil nil ((#("
dfasff" 0 1 (fontified t) 1 7 (fontified t)) . 1886) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1)) ((1886 . 1893)) (25328 23914 41852 159000) 0 nil])
([nil nil ((1862 . 1865) (#("m" 0 1 (fontified nil face font-lock-builtin-face)) . 1862) (1857 . 1863) (#("cu" 0 1 (fontified nil face font-lock-builtin-face) 1 2 (fontified nil face font-lock-builtin-face)) . 1857) (1852 . 1859)) ((#("
  " 1 3 (fontified nil)) . 1852) (#(":ccu" 0 2 (fontified nil face font-lock-builtin-face) 2 3 (fontified nil face font-lock-builtin-face) 3 4 (fontified nil face font-lock-builtin-face)) . 1855) (1857 . 1859) (#("ustomm" 0 5 (fontified nil face font-lock-builtin-face) 5 6 (fontified nil face font-lock-builtin-face)) . 1857) (1862 . 1863) (#("
  " 1 3 (fontified nil)) . 1862)) (25328 23914 71569 887000) 0 nil])
([nil nil ((1872 . 1893) (#("d" 0 1 (fontified nil)) . 1872) (1865 . 1873)) ((#("(evil-ud" 0 7 (fontified nil) 7 8 (fontified nil)) . 1865) (1872 . 1873) (#("ndo-system 'undo-tree" 0 21 (fontified nil)) . 1872)) (25328 23914 112444 483000) 0 nil])
([nil nil ((1894 . 1895)) ((#(")" 0 1 (fontified nil)) . 1894)) (25328 23914 139756 217000) 0 nil])
([nil nil ((1895 . 1901)) ((#("
dfasf" 1 6 (fontified nil)) . 1895)) (25328 23914 241229 590000) 0 nil])
([nil nil ((#("dfasf
" 0 5 (fontified t) 5 6 (fontified t)) . 1896)) ((1896 . 1902)) (25328 23914 268258 391000) 0 nil])
([nil nil ((#("(setq evil-undo-system 'undo-fu)
" 0 1 (fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 23 (fontified t) 23 29 (fontified t) 29 31 (fontified t) 31 32 (fontified t) 32 33 (fontified t)) . 1896)) ((1896 . 1929)) (25328 23914 299588 257000) 0 nil])
([nil nil ((5368 . 5379) (#(" " 0 1 (fontified nil)) . 5367) (5357 . 5369)) ((#("
sdflsadjf 
" 0 1 (fontified nil) 1 10 (fontified nil) 10 11 (fontified nil) 11 12 (fontified nil)) . 5357) (5367 . 5368) (#(" sdfsaflj f" 0 11 (fontified nil)) . 5368)) (25328 23914 327700 424000) 0 nil])
([nil nil ((#("sdflsadjf
 sdfsaflj f
" 0 9 (fontified t) 9 10 (fontified t) 10 21 (fontified t) 21 22 (fontified t)) . 5358) (undo-tree-id812 . -10) (undo-tree-id813 . -10) (undo-tree-id814 . -10) (undo-tree-id815 . -10) (undo-tree-id816 . -10) (undo-tree-id817 . -10) (undo-tree-id818 . -10)) ((5358 . 5380)) (25328 23914 374813 286000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 5357) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1)) ((5357 . 5358)) (25328 23914 403418 823000) 0 nil])
([nil nil ((#("(use-package undo-fu
  :ensure t)
" 0 1 (fontified t) 1 8 (face font-lock-keyword-face fontified t) 8 12 (face font-lock-keyword-face fontified t) 12 13 (fontified t) 13 20 (face font-lock-constant-face fontified t) 20 21 (fontified t) 21 23 (fontified t) 23 30 (face font-lock-builtin-face fontified t) 30 31 (fontified t) 31 32 (fontified t) 32 33 (fontified t) 33 34 (fontified t)) . 5323) (undo-tree-id831 . -34) (undo-tree-id832 . -34) (undo-tree-id833 . -34) (undo-tree-id834 . -34) (undo-tree-id835 . -34) (undo-tree-id836 . -34) (undo-tree-id837 . -34) (undo-tree-id838 . -34) (undo-tree-id839 . -34) (undo-tree-id840 . -34) (undo-tree-id841 . -34) (undo-tree-id842 . -34) (undo-tree-id843 . -34) (undo-tree-id844 . -34) (undo-tree-id845 . -34) (undo-tree-id846 . -34) (undo-tree-id847 . -34)) ((5323 . 5357)) (25328 23925 546492 987000) 0 nil])
([nil nil ((1310 . 1626) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 19 (fontified t) 19 22 (face font-lock-comment-delimiter-face fontified t) 22 60 (face font-lock-comment-face fontified t) 60 61 (fontified t) 61 64 (face font-lock-comment-delimiter-face fontified t) 64 125 (face font-lock-comment-face fontified t) 125 126 (fontified t) 126 129 (face font-lock-comment-delimiter-face fontified t) 129 183 (face font-lock-comment-face fontified t) 183 184 (fontified t) 184 187 (face font-lock-comment-delimiter-face fontified t) 187 193 (face font-lock-comment-face fontified t) 193 237 (face font-lock-comment-face fontified t) 237 266 (fontified t) 266 274 (face font-lock-builtin-face fontified t) 274 300 (fontified t) 300 307 (face font-lock-builtin-face fontified t) 307 316 (fontified t)) . 1310) (1270 . 1309) (#("
" 0 1 (fontified nil)) . 1270) (1157 . 1271) (#(" " 0 1 (fontified nil)) . 1157) (884 . 1158) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(undo-fu all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 23 (fontified t) 23 26 (face font-lock-comment-delimiter-face fontified t) 26 68 (face font-lock-comment-face fontified t) 68 69 (fontified t) 69 72 (face font-lock-comment-delimiter-face fontified t) 72 133 (face font-lock-comment-face fontified t) 133 134 (fontified t) 134 137 (face font-lock-comment-delimiter-face fontified t) 137 191 (face font-lock-comment-face fontified t) 191 192 (fontified t) 192 195 (face font-lock-comment-delimiter-face fontified t) 195 245 (face font-lock-comment-face fontified t) 245 273 (fontified t) 273 384 (fontified t) 384 386 (fontified t) 386 423 (fontified t)) . 884) (undo-tree-id899 . -22) (undo-tree-id900 . 423) (undo-tree-id901 . -1) (undo-tree-id902 . 1) (undo-tree-id903 . -423)) ((884 . 1307) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages " 0 23 (fontified t) 23 26 (face font-lock-comment-delimiter-face fontified t) 26 68 (face font-lock-comment-face fontified t) 68 69 (fontified t) 69 72 (face font-lock-comment-delimiter-face fontified t) 72 133 (face font-lock-comment-face fontified t) 133 134 (fontified t) 134 137 (face font-lock-comment-delimiter-face fontified t) 137 191 (face font-lock-comment-face fontified t) 191 192 (fontified t) 192 195 (face font-lock-comment-delimiter-face fontified t) 195 245 (face font-lock-comment-face fontified t) 245 248 (fontified nil) 248 273 (fontified nil) 273 274 (fontified nil)) . 884) (1157 . 1158) (#("
   '(undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package)
" 0 1 (fontified t) 1 4 (fontified nil) 4 113 (fontified nil) 113 114 (fontified nil)) . 1157) (1270 . 1271) (#(")
 '(warning-suppress-types '((comp))))" 0 39 (fontified t)) . 1270) (1310 . 1626) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 19 (fontified t) 19 22 (face font-lock-comment-delimiter-face fontified t) 22 60 (face font-lock-comment-face fontified t) 60 61 (fontified t) 61 64 (face font-lock-comment-delimiter-face fontified t) 64 125 (face font-lock-comment-face fontified t) 125 126 (fontified t) 126 129 (face font-lock-comment-delimiter-face fontified t) 129 183 (face font-lock-comment-face fontified t) 183 184 (fontified t) 184 187 (face font-lock-comment-delimiter-face fontified t) 187 237 (face font-lock-comment-face fontified t) 237 266 (fontified t) 266 274 (face font-lock-builtin-face fontified t) 274 300 (fontified t) 300 307 (face font-lock-builtin-face fontified t) 307 316 (fontified t)) . 1310) (undo-tree-id894 . -18) (undo-tree-id895 . 316) (undo-tree-id896 . -1) (undo-tree-id897 . 1) (undo-tree-id898 . -316) (t . 0)) (25328 23934 616556 115000) 0 nil] [nil nil ((#("
" 0 1 (fontified t)) . 5322) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1)) ((5322 . 5323)) (25328 23833 52252 578000) 0 nil])
([nil nil ((#("j" 0 1 (face (font-lock-warning-face) help-echo "Easy to misread; consider moving the element to the next line" fontified nil)) . 5323) (5323 . 5324) (t . 0)) ((#("j" 0 1 (face (font-lock-warning-face) help-echo "Easy to misread; consider moving the element to the next line" fontified nil)) . 5323) (5323 . 5324)) (25328 23935 295211 597000) 0 nil])
([nil nil ((5322 . 5357)) ((#("

sfaslkfj  jlasdj lksdafj
f sf sf " 0 1 (fontified t) 1 2 (fontified t) 2 23 (fontified t) 23 26 (fontified t) 26 27 (fontified t) 27 35 (fontified t)) . 5322) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1)) (25328 23829 726477 156000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 2088) (t 25328 23939 13059 60000)) nil (25332 15920 147645 755000) 0 nil] [nil nil ((5358 . 5363) (#(" " 0 1 (fontified nil)) . 5357) (5350 . 5359) (#(" " 0 1 (fontified nil)) . 5349) (5348 . 5351) (#(" " 0 1 (fontified nil)) . 5345) (5340 . 5349) (#(" " 0 1 (fontified nil)) . 5338) (5337 . 5341) (#(" " 0 1 (fontified nil)) . 5336) (5323 . 5338)) ((#("
sflksdaj lsd 
" 0 1 (fontified t) 1 13 (fontified nil) 13 14 (fontified nil) 14 15 (fontified nil)) . 5323) (undo-tree-id935 . -15) (undo-tree-id936 . -15) (undo-tree-id937 . -15) (undo-tree-id938 . -15) (undo-tree-id939 . -15) (undo-tree-id940 . -15) (undo-tree-id941 . -15) (undo-tree-id942 . -15) (undo-tree-id943 . -15) (undo-tree-id944 . -15) (undo-tree-id945 . -15) (undo-tree-id946 . -15) (undo-tree-id947 . -15) (undo-tree-id948 . -15) (undo-tree-id949 . -15) (5336 . 5337) (#("
 f
" 0 1 (fontified t) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 5337) (undo-tree-id950 . -4) (undo-tree-id951 . -4) (undo-tree-id952 . -4) (undo-tree-id953 . -4) (undo-tree-id954 . -4) (undo-tree-id955 . -4) (undo-tree-id956 . -4) (undo-tree-id957 . -4) (undo-tree-id958 . -4) (undo-tree-id959 . -4) (undo-tree-id960 . -4) (undo-tree-id961 . -4) (undo-tree-id962 . -4) (undo-tree-id963 . -4) (undo-tree-id964 . -4) (5338 . 5339) (#("asdf
 sd
" 0 4 (fontified t) 4 5 (fontified t) 5 6 (fontified nil) 6 8 (fontified nil) 8 9 (fontified nil)) . 5340) (undo-tree-id965 . -9) (undo-tree-id966 . -9) (undo-tree-id967 . -9) (undo-tree-id968 . -9) (undo-tree-id969 . -9) (undo-tree-id970 . -9) (undo-tree-id971 . -9) (undo-tree-id972 . -9) (undo-tree-id973 . -9) (undo-tree-id974 . -9) (undo-tree-id975 . -9) (undo-tree-id976 . -9) (undo-tree-id977 . -9) (undo-tree-id978 . -9) (undo-tree-id979 . -9) (5345 . 5346) (#("f 
" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 5348) (undo-tree-id980 . -3) (undo-tree-id981 . -3) (undo-tree-id982 . -3) (undo-tree-id983 . -3) (undo-tree-id984 . -3) (undo-tree-id985 . -3) (undo-tree-id986 . -3) (undo-tree-id987 . -3) (undo-tree-id988 . -3) (undo-tree-id989 . -3) (undo-tree-id990 . -3) (undo-tree-id991 . -3) (undo-tree-id992 . -3) (undo-tree-id993 . -3) (undo-tree-id994 . -3) (5349 . 5350) (#("sdf sdf 
" 0 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil)) . 5350) (undo-tree-id995 . -9) (undo-tree-id996 . -9) (undo-tree-id997 . -9) (undo-tree-id998 . -9) (undo-tree-id999 . -9) (undo-tree-id1000 . -9) (undo-tree-id1001 . -9) (undo-tree-id1002 . -9) (undo-tree-id1003 . -9) (undo-tree-id1004 . -9) (undo-tree-id1005 . -9) (undo-tree-id1006 . -9) (undo-tree-id1007 . -9) (undo-tree-id1008 . -9) (undo-tree-id1009 . -9) (5357 . 5358) (#("sda f" 0 5 (fontified t)) . 5358)) (25328 23934 136942 680000) 0 nil] [nil nil ((5368 . 5370) (5367 . 5368) (5365 . 5367) (#(" " 0 1 (fontified nil)) . 5364) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (5365 . 5366) (5362 . 5365) (5361 . 5362) (5357 . 5361) (#(" " 0 1 (fontified nil)) . -5355) (5357 . 5358) (5355 . 5357) (5354 . 5355) (5345 . 5354) (5344 . 5345) (5326 . 5344) (5324 . 5326) (5323 . 5324) 5322) ((#("
" 0 1 (fontified t)) . 5323) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (#("

" 0 1 (fontified t) 1 2 (fontified t)) . 5324) (undo-tree-id409 . -2) (undo-tree-id410 . -2) (undo-tree-id411 . -2) (undo-tree-id412 . -2) (undo-tree-id413 . -2) (undo-tree-id414 . -2) (undo-tree-id415 . -2) (undo-tree-id416 . -2) (undo-tree-id417 . -2) (undo-tree-id418 . -2) (#("sdfaslk fjs sf s f" 0 18 (fontified nil)) . 5326) (undo-tree-id419 . -18) (undo-tree-id420 . -18) (undo-tree-id421 . -18) (undo-tree-id422 . -18) (undo-tree-id423 . -18) (undo-tree-id424 . -18) (undo-tree-id425 . -18) (undo-tree-id426 . -18) (undo-tree-id427 . -18) (undo-tree-id428 . -18) (#("
" 0 1 (fontified t)) . 5344) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (#("sdf saf s" 0 9 (fontified nil)) . 5345) (undo-tree-id439 . -9) (undo-tree-id440 . -9) (undo-tree-id441 . -9) (undo-tree-id442 . -9) (undo-tree-id443 . -9) (undo-tree-id444 . -9) (undo-tree-id445 . -9) (undo-tree-id446 . -9) (undo-tree-id447 . -9) (undo-tree-id448 . -9) (#("
" 0 1 (fontified t)) . 5354) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (#(" f" 0 1 (fontified nil) 1 2 (fontified nil)) . 5355) (undo-tree-id459 . -2) (undo-tree-id460 . -2) (undo-tree-id461 . -2) (undo-tree-id462 . -2) (undo-tree-id463 . -2) (undo-tree-id464 . -2) (undo-tree-id465 . -2) (undo-tree-id466 . -2) (undo-tree-id467 . -2) (undo-tree-id468 . -2) (#("
" 0 1 (fontified nil)) . 5357) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (5355 . 5356) (#("sa f" 0 4 (fontified nil)) . 5357) (undo-tree-id479 . -4) (undo-tree-id480 . -4) (undo-tree-id481 . -4) (undo-tree-id482 . -4) (undo-tree-id483 . -4) (undo-tree-id484 . -4) (undo-tree-id485 . -4) (undo-tree-id486 . -4) (undo-tree-id487 . -4) (undo-tree-id488 . -4) (#("
" 0 1 (fontified t)) . 5361) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (#("as " 0 2 (fontified nil) 2 3 (fontified nil)) . 5362) (undo-tree-id499 . -1) (undo-tree-id500 . -3) (undo-tree-id501 . -3) (undo-tree-id502 . -3) (undo-tree-id503 . -3) (undo-tree-id504 . -3) (undo-tree-id505 . -3) (undo-tree-id506 . -1) (#("
" 0 1 (fontified nil)) . 5365) (undo-tree-id507 . -1) (5364 . 5365) (#("sa" 0 2 (fontified nil)) . 5365) (#("
" 0 1 (fontified t)) . 5367) (#(" f" 0 2 (fontified t)) . 5368)) (25328 23893 89442 809000) 0 nil] [nil nil ((5323 . 5344)) ((#("


ahhmed sas

sfa
sf" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 18 (fontified t) 18 19 (fontified t) 19 21 (fontified t)) . 5323) (undo-tree-id357 . -12) (undo-tree-id358 . -3) (undo-tree-id359 . -14) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -2) (undo-tree-id371 . -2) (undo-tree-id372 . -2) (undo-tree-id373 . -2) (undo-tree-id374 . -2) (undo-tree-id375 . -2) (undo-tree-id376 . -2) (undo-tree-id377 . -2) (undo-tree-id378 . -2) (undo-tree-id379 . -2) (undo-tree-id380 . -3) (undo-tree-id381 . -12) (undo-tree-id382 . -12) (undo-tree-id383 . -12) (undo-tree-id384 . -12) (undo-tree-id385 . -12) (undo-tree-id386 . -12) (undo-tree-id387 . -12) (undo-tree-id388 . -12) (undo-tree-id389 . -12) (undo-tree-id390 . -12) (undo-tree-id391 . -12)) (25328 23884 805271 136000) 0 nil])
([nil nil ((#("
sfaslkfj  jlasdj lksdafj
f sf sf " 0 1 (fontified t) 1 22 (fontified t) 22 25 (fontified t) 25 26 (fontified t) 26 34 (fontified t)) . 5323)) ((5323 . 5357)) (25328 23828 842042 604000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face font-lock-string-face)) . 3971)) nil (25332 15920 147643 907000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . 5376) (5376 . 5378) (#("  " 0 2 (fontified nil)) . 5375) (5364 . 5378)) ((#("
sdfl aslkf  
" 0 1 (fontified t) 1 11 (fontified nil) 11 13 (fontified nil) 13 14 (fontified nil)) . 5364) (undo-tree-id904 . -14) (undo-tree-id905 . -14) (undo-tree-id906 . -14) (undo-tree-id907 . -14) (undo-tree-id908 . -14) (undo-tree-id909 . -14) (undo-tree-id910 . -14) (undo-tree-id911 . -14) (undo-tree-id912 . -14) (undo-tree-id913 . -14) (undo-tree-id914 . -14) (undo-tree-id915 . -14) (undo-tree-id916 . -14) (undo-tree-id917 . -14) (undo-tree-id918 . -14) (undo-tree-id919 . -14) (undo-tree-id920 . -14) (undo-tree-id921 . -14) (undo-tree-id922 . -14) (undo-tree-id923 . -14) (undo-tree-id924 . -14) (undo-tree-id925 . -14) (undo-tree-id926 . -14) (undo-tree-id927 . -14) (undo-tree-id928 . -14) (undo-tree-id929 . -14) (undo-tree-id930 . -14) (undo-tree-id931 . -14) (undo-tree-id932 . -14) (undo-tree-id933 . -14) (5375 . 5377) (#(" 
" 0 1 (fontified nil) 1 2 (fontified nil)) . 5376) (undo-tree-id934 . -2) (5376 . 5377)) (25328 23933 252608 110000) 0 nil] [nil nil ((5378 . 5380) (5377 . 5378) (5374 . 5377) (#(" " 0 1 (fontified nil)) . 5373) (undo-tree-id508 . -1) (5374 . 5375) (5372 . 5374) (#(" " 0 1 (fontified nil)) . 5371) (undo-tree-id509 . -1) (5372 . 5373) (5370 . 5372) (#(" " 0 1 (fontified nil)) . 5369) (undo-tree-id510 . -1) (5370 . 5371) (5364 . 5370)) ((#("dsfas " 0 5 (fontified nil) 5 6 (fontified nil)) . 5364) (undo-tree-id552 . -6) (undo-tree-id553 . -6) (undo-tree-id554 . -6) (undo-tree-id555 . -6) (#("
" 0 1 (fontified nil)) . 5370) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (5369 . 5370) (#("f " 0 1 (fontified nil) 1 2 (fontified nil)) . 5370) (undo-tree-id560 . -2) (undo-tree-id561 . -2) (undo-tree-id562 . -2) (undo-tree-id563 . -2) (#("
" 0 1 (fontified nil)) . 5372) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (5371 . 5372) (#("f " 0 1 (fontified nil) 1 2 (fontified nil)) . 5372) (undo-tree-id568 . -2) (undo-tree-id569 . -2) (undo-tree-id570 . -2) (undo-tree-id571 . -2) (#("
" 0 1 (fontified nil)) . 5374) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (5373 . 5374) (#("sad" 0 3 (fontified nil)) . 5374) (undo-tree-id576 . -3) (undo-tree-id577 . -3) (undo-tree-id578 . -3) (undo-tree-id579 . -3) (#("
" 0 1 (fontified t)) . 5377) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (#(" a" 0 2 (fontified t)) . 5378) (undo-tree-id584 . -1) (undo-tree-id585 . -1)) (25328 23899 38137 192000) 0 nil])
nil
nil
([nil nil ((#("
" 0 1 (fontified t)) . -5322) (undo-tree-id2062 . -1) (undo-tree-id2064 . -1) (undo-tree-id2066 . -1) (undo-tree-id2068 . -1) (undo-tree-id2070 . -1) (undo-tree-id2072 . -1) (undo-tree-id2074 . -1) (undo-tree-id2076 . -1) (undo-tree-id2078 . -1) (undo-tree-id2080 . -1) (undo-tree-id2082 . -1) (undo-tree-id2084 . -1) (undo-tree-id2086 . -1) (undo-tree-id2088 . -1) (undo-tree-id2090 . -1) (undo-tree-id2092 . -1) (undo-tree-id2094 . -1) (undo-tree-id2096 . -1) (undo-tree-id2098 . -1) (undo-tree-id2100 . -1) (undo-tree-id2102 . -1) (undo-tree-id2104 . -1) 5323) ((5322 . 5323)) (25328 23825 523380 427000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face font-lock-string-face)) . 3971)) nil (25332 15920 147642 445000) 0 nil])
nil
nil
([nil nil ((1300 . 1616) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 19 (fontified t) 19 22 (face font-lock-comment-delimiter-face fontified t) 22 60 (face font-lock-comment-face fontified t) 60 61 (fontified t) 61 64 (face font-lock-comment-delimiter-face fontified t) 64 125 (face font-lock-comment-face fontified t) 125 126 (fontified t) 126 129 (face font-lock-comment-delimiter-face fontified t) 129 183 (face font-lock-comment-face fontified t) 183 184 (fontified t) 184 187 (face font-lock-comment-delimiter-face fontified t) 187 193 (face font-lock-comment-face fontified t) 193 237 (face font-lock-comment-face fontified t) 237 266 (fontified t) 266 274 (face font-lock-builtin-face fontified t) 274 300 (fontified t) 300 307 (face font-lock-builtin-face fontified t) 307 316 (fontified t)) . 1300) (1260 . 1299) (#("
" 0 1 (fontified nil)) . 1260) (1157 . 1261) (#(" " 0 1 (fontified nil)) . 1157) (884 . 1158) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(undo-fu all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 23 (fontified nil) 23 26 (face font-lock-comment-delimiter-face fontified nil) 26 68 (face font-lock-comment-face fontified nil) 68 69 (fontified t) 69 72 (face font-lock-comment-delimiter-face fontified t) 72 133 (face font-lock-comment-face fontified t) 133 134 (fontified t) 134 137 (face font-lock-comment-delimiter-face fontified t) 137 191 (face font-lock-comment-face fontified t) 191 192 (fontified t) 192 195 (face font-lock-comment-delimiter-face fontified t) 195 245 (face font-lock-comment-face fontified t) 245 386 (fontified t) 386 423 (fontified t)) . 884) (undo-tree-id0 . -191) (undo-tree-id1 . -423) (undo-tree-id2 . -423) (undo-tree-id3 . -386) (undo-tree-id4 . -423) (undo-tree-id5 . -423) (undo-tree-id6 . -423) (undo-tree-id7 . -423) (undo-tree-id8 . -423) (undo-tree-id9 . -423) (undo-tree-id10 . -423) (undo-tree-id11 . -423) (undo-tree-id12 . -423) (undo-tree-id13 . -423) (undo-tree-id14 . -423) (undo-tree-id15 . -423) (undo-tree-id16 . -423) (undo-tree-id17 . -423) (undo-tree-id18 . -423) (undo-tree-id19 . -423)) ((884 . 1307) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages " 0 23 (fontified t) 23 26 (face font-lock-comment-delimiter-face fontified t) 26 68 (face font-lock-comment-face fontified t) 68 69 (fontified t) 69 72 (face font-lock-comment-delimiter-face fontified t) 72 133 (face font-lock-comment-face fontified t) 133 134 (fontified t) 134 137 (face font-lock-comment-delimiter-face fontified t) 137 191 (face font-lock-comment-face fontified t) 191 192 (fontified t) 192 195 (face font-lock-comment-delimiter-face fontified t) 195 245 (face font-lock-comment-face fontified t) 245 248 (fontified nil) 248 273 (fontified nil) 273 274 (fontified nil)) . 884) (1157 . 1158) (#("
   '(all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package)
" 0 1 (fontified t) 1 4 (fontified nil) 4 103 (fontified nil) 103 104 (fontified nil)) . 1157) (1260 . 1261) (#(")
 '(warning-suppress-types '((comp))))" 0 1 (fontified t) 1 2 (fontified t) 2 5 (fontified t) 5 27 (fontified t) 27 28 (fontified t) 28 37 (fontified t) 37 38 (fontified t) 38 39 (fontified t)) . 1260) (1300 . 1616) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 19 (fontified t) 19 22 (face font-lock-comment-delimiter-face fontified t) 22 60 (face font-lock-comment-face fontified t) 60 61 (fontified t) 61 64 (face font-lock-comment-delimiter-face fontified t) 64 125 (face font-lock-comment-face fontified t) 125 126 (fontified t) 126 129 (face font-lock-comment-delimiter-face fontified t) 129 183 (face font-lock-comment-face fontified t) 183 184 (fontified t) 184 187 (face font-lock-comment-delimiter-face fontified t) 187 201 (face font-lock-comment-face fontified t) 201 237 (face font-lock-comment-face fontified t) 237 240 (fontified t) 240 260 (fontified t) 260 261 (fontified t) 261 266 (fontified t) 266 274 (face font-lock-builtin-face fontified t) 274 300 (fontified t) 300 307 (face font-lock-builtin-face fontified t) 307 314 (fontified t) 314 315 (fontified t) 315 316 (fontified t)) . 1300) (t . 0)) (25328 23825 129306 990000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face font-lock-string-face)) . 3971)) nil (25332 15920 147641 172000) 0 nil])
nil
([nil nil ((#("m" 0 1 (fontified t face font-lock-string-face)) . 3971)) nil (25332 15920 147640 7000) 0 nil])
([nil nil ((3975 . 3977) (#("d" 0 1 (fontified t face font-lock-string-face)) . -3975) (undo-tree-id0 . -1) 3976 (3971 . 3976)) nil (25332 17262 626202 625000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 4497) (undo-tree-id227 . -1) (t 25332 15920 153868 16000)) nil (25332 17283 442454 937000) 0 nil] [nil nil ((#("
" 0 1 (fontified t)) . 4497) (undo-tree-id224 . -1) (t 25332 15920 153868 16000)) ((4497 . 4498)) (25332 17261 517629 316000) 0 nil])
([nil nil ((4442 . 4443)) nil (25332 17333 836730 674000) 0 nil])
([nil nil ((4442 . 4443) (#("(setq neo-theme (if(display-graphic-p) 'icons 'arrow))
" 0 1 (fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 17 (fontified t) 17 19 (face font-lock-keyword-face fontified t) 19 55 (fontified t)) . 4442) (undo-tree-id0 . -23) (undo-tree-id1 . -55) (undo-tree-id2 . -55) (undo-tree-id3 . -55) (undo-tree-id4 . -55) (undo-tree-id5 . -55) (undo-tree-id6 . -55) (undo-tree-id7 . -55) (undo-tree-id8 . -55) (undo-tree-id9 . -55) (undo-tree-id10 . -55) (undo-tree-id11 . -55) (undo-tree-id12 . -55) (undo-tree-id13 . -55) (undo-tree-id14 . -55) (undo-tree-id15 . -55) (undo-tree-id16 . -55) (undo-tree-id17 . -55) (undo-tree-id18 . -55) (undo-tree-id19 . -55) (undo-tree-id20 . -55) (undo-tree-id21 . -55) (undo-tree-id22 . -55) (undo-tree-id23 . -55) (undo-tree-id24 . -55) (undo-tree-id25 . -55) (undo-tree-id26 . -55) (undo-tree-id27 . -55) (undo-tree-id28 . -55) (undo-tree-id29 . -55) (undo-tree-id30 . -55) (undo-tree-id31 . -55) (undo-tree-id32 . -55) (undo-tree-id33 . -55) (undo-tree-id34 . -55) (undo-tree-id35 . -55) (undo-tree-id36 . -55) (undo-tree-id37 . -55) (undo-tree-id38 . -55) (undo-tree-id39 . -55) (undo-tree-id40 . -55) (undo-tree-id41 . -55) (undo-tree-id42 . -55) (undo-tree-id43 . -55) (undo-tree-id44 . -55) (undo-tree-id45 . -55) (undo-tree-id46 . -55) (undo-tree-id47 . -55) (undo-tree-id48 . -55) (undo-tree-id49 . -55) (undo-tree-id50 . -55) (undo-tree-id51 . -55) (undo-tree-id52 . -55) (undo-tree-id53 . -55) (undo-tree-id54 . -55) (undo-tree-id55 . -55) (undo-tree-id56 . -55) (undo-tree-id57 . -55) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -2) (undo-tree-id69 . -2) (undo-tree-id70 . -2) (undo-tree-id71 . -2) (undo-tree-id72 . -2) (undo-tree-id73 . -3) (undo-tree-id74 . -3) (undo-tree-id75 . -3) (undo-tree-id76 . -3) (undo-tree-id77 . -3) (undo-tree-id78 . -4) (undo-tree-id79 . -4) (undo-tree-id80 . -4) (undo-tree-id81 . -4) (undo-tree-id82 . -4) (undo-tree-id83 . -5) (undo-tree-id84 . -5) (undo-tree-id85 . -5) (undo-tree-id86 . -5) (undo-tree-id87 . -5) (undo-tree-id88 . -6) (undo-tree-id89 . -6) (undo-tree-id90 . -6) (undo-tree-id91 . -6) (undo-tree-id92 . -6) (undo-tree-id93 . -7) (undo-tree-id94 . -7) (undo-tree-id95 . -7) (undo-tree-id96 . -7) (undo-tree-id97 . -7) (undo-tree-id98 . -8) (undo-tree-id99 . -8) (undo-tree-id100 . -8) (undo-tree-id101 . -8) (undo-tree-id102 . -8) (undo-tree-id103 . -9) (undo-tree-id104 . -9) (undo-tree-id105 . -9) (undo-tree-id106 . -9) (undo-tree-id107 . -9) (undo-tree-id108 . -10) (undo-tree-id109 . -10) (undo-tree-id110 . -10) (undo-tree-id111 . -10) (undo-tree-id112 . -10) (undo-tree-id113 . -11) (undo-tree-id114 . -11) (undo-tree-id115 . -11) (undo-tree-id116 . -11) (undo-tree-id117 . -11) (undo-tree-id118 . -12) (undo-tree-id119 . -12) (undo-tree-id120 . -12) (undo-tree-id121 . -12) (undo-tree-id122 . -12) (undo-tree-id123 . -13) (undo-tree-id124 . -13) (undo-tree-id125 . -13) (undo-tree-id126 . -13) (undo-tree-id127 . -13) (undo-tree-id128 . -14) (undo-tree-id129 . -14) (undo-tree-id130 . -14) (undo-tree-id131 . -14) (undo-tree-id132 . -14) (undo-tree-id133 . -15) (undo-tree-id134 . -15) (undo-tree-id135 . -15) (undo-tree-id136 . -15) (undo-tree-id137 . -15) (undo-tree-id138 . -16) (undo-tree-id139 . -16) (undo-tree-id140 . -16) (undo-tree-id141 . -16) (undo-tree-id142 . -16) (undo-tree-id143 . -17) (undo-tree-id144 . -17) (undo-tree-id145 . -17) (undo-tree-id146 . -17) (undo-tree-id147 . -17) (undo-tree-id148 . -18) (undo-tree-id149 . -18) (undo-tree-id150 . -18) (undo-tree-id151 . -18) (undo-tree-id152 . -18) (undo-tree-id153 . -19) (undo-tree-id154 . -19) (undo-tree-id155 . -19) (undo-tree-id156 . -19) (undo-tree-id157 . -19) (undo-tree-id158 . -20) (undo-tree-id159 . -20) (undo-tree-id160 . -20) (undo-tree-id161 . -20) (undo-tree-id162 . -20) (undo-tree-id163 . -21) (undo-tree-id164 . -21) (undo-tree-id165 . -21) (undo-tree-id166 . -21) (undo-tree-id167 . -21) (undo-tree-id168 . -22) (undo-tree-id169 . -22) (undo-tree-id170 . -22) (undo-tree-id171 . -22) (undo-tree-id172 . -22) (undo-tree-id173 . -23) (undo-tree-id174 . -23) (undo-tree-id175 . -23) (undo-tree-id176 . -23) (undo-tree-id177 . -23) (undo-tree-id178 . -23) (undo-tree-id179 . -23) (undo-tree-id180 . -23) (undo-tree-id181 . -23) (undo-tree-id182 . -23) (undo-tree-id183 . -23) (undo-tree-id184 . -23) (undo-tree-id185 . -23) (undo-tree-id186 . -23) (undo-tree-id187 . -23) (undo-tree-id188 . -23) (undo-tree-id189 . -23) (undo-tree-id190 . -23) (undo-tree-id191 . -23) (undo-tree-id192 . -23) (undo-tree-id193 . -23) (undo-tree-id194 . -23) (undo-tree-id195 . -23) (undo-tree-id196 . -23) (undo-tree-id197 . -23) (undo-tree-id198 . -23) (undo-tree-id199 . -23) (undo-tree-id200 . -23) (undo-tree-id201 . -23) (undo-tree-id202 . -23) (undo-tree-id203 . -23) (undo-tree-id204 . -23) (undo-tree-id205 . -23) (undo-tree-id206 . -23) (undo-tree-id207 . -23) (undo-tree-id208 . -23) (undo-tree-id209 . -23) (undo-tree-id210 . -23) (undo-tree-id211 . -23) (undo-tree-id212 . -23) (undo-tree-id213 . -23) (undo-tree-id214 . -23) (undo-tree-id215 . -23) (undo-tree-id216 . -23) (undo-tree-id217 . -23) (undo-tree-id218 . -23) (undo-tree-id219 . -23) (undo-tree-id220 . -23) (undo-tree-id221 . -23) (undo-tree-id222 . -23) (undo-tree-id223 . -23) 4465) ((4442 . 4497) (#("
" 0 1 (fontified t)) . 4442) (undo-tree-id225 . -1) (undo-tree-id226 . 1)) (25332 17261 517319 818000) 0 nil])
([nil nil ((5385 . 5386) (5371 . 5385) (5368 . 5371) (5361 . 5368) (5358 . 5361) (5352 . 5358) (#("u" 0 1 (fontified t face font-lock-builtin-face)) . -5352) (undo-tree-id8 . -1) 5353 (5349 . 5353) (5346 . 5349) (5339 . 5346) (5326 . 5339) (5325 . 5326) (t 25332 17283 453280 407000) 5325) nil (25332 17577 960247 896000) 0 nil] [nil nil ((nil rear-nonsticky nil 1874 . 1875) (nil fontified nil 1874 . 1875) (1874 . 1875) 1873 (t 25332 17283 453280 407000)) ((#("
" 0 1 (fontified nil rear-nonsticky nil)) . 1874) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (nil rear-nonsticky t 1874 . 1875)) (25332 17333 836395 855000) 0 nil] [nil nil ((nil rear-nonsticky nil 1874 . 1875) (nil fontified nil 1874 . 1875) (1874 . 1875) 1873 (t 25332 17283 453280 407000)) ((#("
" 0 1 (fontified nil rear-nonsticky nil)) . 1874) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (nil rear-nonsticky t 1874 . 1875)) (25332 17332 466528 814000) 0 nil])
nil
([nil nil ((4459 . 4462) (#("(if" 0 3 (fontified t face font-lock-comment-face)) . 4459)) nil (25332 17577 960210 682000) 0 nil])
nil
nil
([nil nil ((4419 . 4420) (#("n" 0 1 (fontified t face font-lock-string-face)) . 4419)) nil (25332 17577 960202 877000) 0 nil])
([nil nil ((5387 . 5389) (#("  " 0 2 (fontified nil)) . 5386) (undo-tree-id14 . -2) (5385 . 5389) (t 25332 17577 970961 936000)) nil (25332 17767 469791 149000) 0 nil])
([nil nil ((5388 . 5393) (5386 . 5388) (5386 . 5387) (#("
" 0 1 (fontified t)) . 5386) (undo-tree-id13 . -1)) nil (25332 17767 469788 106000) 0 nil])
([nil nil ((5435 . 5436) (5414 . 5435) (5393 . 5414)) nil (25332 17767 469784 996000) 0 nil])
([nil nil ((1318 . 1634) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 19 (fontified nil) 19 22 (fontified nil face font-lock-comment-delimiter-face) 22 60 (fontified nil face font-lock-comment-face) 60 61 (fontified nil) 61 64 (fontified nil face font-lock-comment-delimiter-face) 64 125 (fontified nil face font-lock-comment-face) 125 126 (fontified nil) 126 129 (fontified nil face font-lock-comment-delimiter-face) 129 183 (fontified nil face font-lock-comment-face) 183 184 (fontified nil) 184 187 (fontified nil face font-lock-comment-delimiter-face) 187 191 (fontified nil face font-lock-comment-face) 191 237 (fontified nil face font-lock-comment-face) 237 266 (fontified nil) 266 274 (fontified nil face font-lock-builtin-face) 274 300 (fontified nil) 300 307 (fontified nil face font-lock-builtin-face) 307 316 (fontified nil)) . -1318) (1278 . 1317) (#("
" 0 1 (fontified nil)) . -1278) (1157 . 1279) (#(" " 0 1 (fontified nil)) . 1157) (884 . 1158) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 23 (fontified nil) 23 26 (fontified nil face font-lock-comment-delimiter-face) 26 68 (fontified nil face font-lock-comment-face) 68 69 (fontified nil) 69 72 (fontified nil face font-lock-comment-delimiter-face) 72 133 (fontified nil face font-lock-comment-face) 133 134 (fontified nil) 134 137 (fontified nil face font-lock-comment-delimiter-face) 137 191 (fontified nil face font-lock-comment-face) 191 192 (fontified nil) 192 195 (fontified nil face font-lock-comment-delimiter-face) 195 245 (fontified nil face font-lock-comment-face) 245 425 (fontified nil)) . -884) (undo-tree-id9 . -279) (undo-tree-id10 . -279) (undo-tree-id11 . -279) (undo-tree-id12 . -279) 5439) nil (25332 17767 469778 848000) 0 nil])
([nil nil ((5450 . 5452) (5449 . 5450) (5448 . 5449) (t . 0) 5447) nil (25332 17802 667668 760000) 0 nil])
([nil nil ((#("cr
" 0 2 (fontified t) 2 3 (fontified t)) . 5450) (undo-tree-id15 . 1) (undo-tree-id16 . -2) (undo-tree-id17 . -1) (undo-tree-id18 . -2) (undo-tree-id19 . -2) (undo-tree-id20 . -2) (undo-tree-id21 . -2) (undo-tree-id22 . -2) (undo-tree-id23 . -2) (undo-tree-id24 . -2) (undo-tree-id25 . -2) (undo-tree-id26 . -2) (undo-tree-id27 . -2) (undo-tree-id28 . -2) (undo-tree-id29 . -2) (undo-tree-id30 . -2) (undo-tree-id31 . -2) (undo-tree-id32 . -2) (undo-tree-id33 . -2) (undo-tree-id34 . -2) (undo-tree-id35 . -2) (undo-tree-id36 . -2) (undo-tree-id37 . -2) (undo-tree-id38 . -2) (undo-tree-id39 . -2) (undo-tree-id40 . -2) (undo-tree-id41 . -2) (undo-tree-id42 . -2) (undo-tree-id43 . -2) (undo-tree-id44 . -2) (undo-tree-id45 . -2) (undo-tree-id46 . -2) (undo-tree-id47 . -2) (undo-tree-id48 . -2) (undo-tree-id49 . -2) (undo-tree-id50 . -2) (undo-tree-id51 . -2) (undo-tree-id52 . -2) (undo-tree-id53 . -2) (undo-tree-id54 . -2) (undo-tree-id55 . -2) (undo-tree-id56 . -2) (undo-tree-id57 . -2) (undo-tree-id58 . -2) (undo-tree-id59 . -2) (undo-tree-id60 . -2) (undo-tree-id61 . -2) (undo-tree-id62 . -2) (undo-tree-id63 . -2) (undo-tree-id64 . -2) (undo-tree-id65 . -2) (undo-tree-id66 . -2) (undo-tree-id67 . -3) (undo-tree-id68 . -2) (undo-tree-id69 . -2) (undo-tree-id70 . -2) (undo-tree-id71 . -2) (undo-tree-id72 . -2) (undo-tree-id73 . -2) (undo-tree-id74 . -2) (undo-tree-id75 . -2) (undo-tree-id76 . -2) (undo-tree-id77 . -2) (undo-tree-id78 . -2) (undo-tree-id79 . -2) (undo-tree-id80 . -2) (undo-tree-id81 . -2) (undo-tree-id82 . -2) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) 5451) nil (25332 17802 667652 455000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -5445) (undo-tree-id0 . -1) 5446 (t 25332 17802 681257 2000)) nil (25332 17829 472830 582000) 0 nil])
([nil nil ((5454 . 5456) (#("a" 0 1 (fontified t)) . -5454) (undo-tree-id66 . -1) (#("c" 0 1 (fontified t)) . -5455) (undo-tree-id67 . -1) (#("k" 0 1 (fontified t)) . -5456) (undo-tree-id68 . -1) 5457 (5454 . 5457) (#("c" 0 1 (fontified t)) . -5454) (undo-tree-id69 . -1) (#("k" 0 1 (fontified t)) . -5455) (undo-tree-id70 . -1) (#("e" 0 1 (fontified t)) . -5456) (undo-tree-id71 . -1) 5457 (5448 . 5457) (#("u" 0 1 (fontified t)) . -5448) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (#("s" 0 1 (fontified t)) . -5449) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (#("e" 0 1 (fontified t)) . -5450) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (#("
" 0 1 (fontified t)) . -5451) (undo-tree-id78 . -1) (undo-tree-id79 . -1) 5452 (#("j" 0 1 (fontified nil)) . -5451) (5451 . 5452) (5448 . 5451) (5447 . 5448) (5446 . 5447) (t 25332 17829 481964 295000) 5445) nil (25332 18491 127229 892000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -5447) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (#("u" 0 1 (fontified t)) . -5448) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (#("s" 0 1 (fontified t)) . -5449) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (#("e" 0 1 (fontified t)) . -5450) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (#("-" 0 1 (fontified t)) . -5451) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#("p" 0 1 (fontified t)) . -5452) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (#("a" 0 1 (fontified t)) . -5453) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (#("c" 0 1 (fontified t)) . -5454) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (#("k" 0 1 (fontified t)) . -5455) (undo-tree-id64 . -1) (undo-tree-id65 . -1) 5456) nil (25332 18491 127209 341000) 0 nil])
([nil nil ((5471 . 5472) (5469 . 5471) (5448 . 5469) (5447 . 5448) 5447) nil (25332 18491 127185 318000) 0 nil])
([nil nil ((#("(functionp 'module-load)
" 0 1 (fontified t) 1 24 (fontified t) 24 25 (fontified t)) . 5448) (undo-tree-id40 . -25) (undo-tree-id41 . -23) (undo-tree-id42 . 1) (undo-tree-id43 . 2) (undo-tree-id44 . -24) (undo-tree-id45 . 25) (undo-tree-id46 . -1) 5471) nil (25332 18491 127183 671000) 0 nil])
([nil nil ((5449 . 5467) (#("module" 0 6 (fontified t)) . -5449) (undo-tree-id34 . -6) (undo-tree-id35 . -6) 5455 (5450 . 5455) (#("d" 0 1 (fontified t)) . -5450) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (#("o" 0 1 (fontified t)) . -5451) (undo-tree-id38 . -1) (undo-tree-id39 . -1) 5452 (5449 . 5452) (5448 . 5449) 5448) nil (25332 18491 127172 940000) 0 nil])
([nil nil ((#("
module-file-suffix" 0 1 (fontified t) 1 19 (fontified t)) . 5448) (undo-tree-id31 . -1) (undo-tree-id32 . -19) (undo-tree-id33 . -18) 5466) nil (25332 18491 127164 932000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -5447) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) 5448) nil (25332 18491 127160 905000) 0 nil])
([nil nil ((5523 . 5530) (#("u" 0 1 (face font-lock-builtin-face fontified t)) . -5523) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (#("s" 0 1 (face font-lock-builtin-face fontified t)) . -5524) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (#("r" 0 1 (face font-lock-builtin-face fontified t)) . -5525) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (#("e" 0 1 (face font-lock-builtin-face fontified t)) . -5526) (undo-tree-id7 . -1) (undo-tree-id8 . -1) 5527 (5520 . 5527) (5517 . 5520) (#(")" 0 1 (fontified t)) . -5517) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . 1) (undo-tree-id12 . -1) (#("=" 0 1 (fontified t)) . -5518) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (#("
" 0 1 (fontified t)) . -5519) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) 5520 (5519 . 5520) (5499 . 5519) (5488 . 5499) (#("use-pac" 0 7 (fontified t)) . -5488) (undo-tree-id18 . -7) (undo-tree-id19 . -7) 5495 (5487 . 5495) (5486 . 5487) (5485 . 5486) (5476 . 5485) (5473 . 5476) (#(")" 0 1 (fontified t)) . -5473) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . 1) (undo-tree-id23 . -1) 5474 (5461 . 5474) (5448 . 5461) (#("9" 0 1 (fontified t)) . -5448) (undo-tree-id24 . -1) (undo-tree-id25 . -1) 5449 (5448 . 5449) (#("(" 0 1 (fontified t)) . -5448) (undo-tree-id26 . -1) (undo-tree-id27 . -1) 5449 (5448 . 5449) (5447 . 5448) 5447) nil (25332 18491 127152 55000) 0 nil])
([nil nil ((5517 . 5518)) nil (25332 18491 127091 258000) 0 nil])
([nil nil ((5486 . 5487) 5474) nil (25332 18491 127090 323000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t)) . 5461)) nil (25332 18491 127088 683000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t)) . 5500)) nil (25332 18491 127087 68000) 0 nil])
([nil nil ((5542 . 5543) (1330 . 1646) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 19 (fontified nil) 19 22 (face font-lock-comment-delimiter-face fontified nil) 22 60 (face font-lock-comment-face fontified nil) 60 61 (fontified nil) 61 64 (face font-lock-comment-delimiter-face fontified nil) 64 125 (face font-lock-comment-face fontified nil) 125 126 (fontified nil) 126 129 (face font-lock-comment-delimiter-face fontified nil) 129 183 (face font-lock-comment-face fontified nil) 183 184 (fontified nil) 184 187 (face font-lock-comment-delimiter-face fontified nil) 187 208 (face font-lock-comment-face fontified nil) 208 237 (face font-lock-comment-face fontified nil) 237 266 (fontified nil) 266 274 (face font-lock-builtin-face fontified nil) 274 300 (fontified nil) 300 307 (face font-lock-builtin-face fontified nil) 307 316 (fontified nil)) . -1330) (1290 . 1329) (#("
" 0 1 (fontified nil)) . -1290) (1157 . 1291) (#(" " 0 1 (fontified nil)) . 1157) (884 . 1158) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 23 (fontified nil) 23 26 (face font-lock-comment-delimiter-face fontified nil) 26 68 (face font-lock-comment-face fontified nil) 68 69 (fontified nil) 69 72 (face font-lock-comment-delimiter-face fontified nil) 72 133 (face font-lock-comment-face fontified nil) 133 134 (fontified nil) 134 137 (face font-lock-comment-delimiter-face fontified nil) 137 191 (face font-lock-comment-face fontified nil) 191 192 (fontified nil) 192 195 (face font-lock-comment-delimiter-face fontified nil) 195 245 (face font-lock-comment-face fontified nil) 245 433 (fontified nil)) . -884) 5484) nil (25332 18491 127081 236000) 0 nil])
([nil nil ((1348 . 1664) ("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" . -1348) (1308 . 1347) (#("
" 0 1 (fontified nil)) . -1308) (1157 . 1309) (#(" " 0 1 (fontified nil)) . 1157) (884 . 1158) ("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" . -884) 5541) nil (25332 18508 201719 8000) 0 nil])
([nil nil ((5551 . 5552) (5528 . 5551) (#("global-tre" 0 10 (fontified t)) . -5528) (undo-tree-id80 . -10) 5538 (5534 . 5538) (5527 . 5534) (#("g" 0 1 (fontified t)) . -5527) (undo-tree-id81 . -1) (#("l" 0 1 (fontified t)) . -5528) (undo-tree-id82 . -1) (#("o" 0 1 (fontified t)) . -5529) (undo-tree-id83 . -1) (#("g" 0 1 (fontified t)) . -5530) (undo-tree-id84 . -1) 5531 (5527 . 5531) (5524 . 5527) (5517 . 5524) (5514 . 5517) (t . 0)) nil (25332 18581 204307 833000) 0 nil])
([nil nil ((5575 . 5576) (5556 . 5575) (#("tree-sitter-hl-mod" 0 18 (fontified t)) . -5556) (undo-tree-id85 . -18) 5574 (5556 . 5574) (5555 . 5556) (5552 . 5555) (t 25332 18581 215734 634000)) nil (25332 18830 605689 677000) 0 nil])
([nil nil ((5575 . 5577)) nil (25332 18830 605672 969000) 0 nil])
([nil nil ((#("(tree-sitter-hl-mode t" 0 22 (fontified t)) . 5555) (undo-tree-id88 . 22) (undo-tree-id89 . -1) (t 25332 18830 613163 459000)) nil (25332 18881 730496 204000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 5555) (undo-tree-id86 . 1) (undo-tree-id87 . -1)) nil (25332 18881 730489 156000) 0 nil])
([nil nil ((#("  " 0 2 (fontified nil)) . 5552) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -2) (undo-tree-id11 . -2) (undo-tree-id12 . -2) (undo-tree-id13 . -2) (undo-tree-id14 . -2) (undo-tree-id15 . -2) (undo-tree-id16 . -2) (undo-tree-id17 . -2) (undo-tree-id18 . -2) (undo-tree-id19 . -2) (undo-tree-id20 . -2) (undo-tree-id21 . -2) (undo-tree-id22 . -2) (undo-tree-id23 . -2) (undo-tree-id24 . -2) (undo-tree-id25 . -2) (undo-tree-id26 . -2) (undo-tree-id27 . -2) (undo-tree-id28 . -2) (undo-tree-id29 . -2) (undo-tree-id30 . -2) (undo-tree-id31 . -2) (undo-tree-id32 . -2) (undo-tree-id33 . -2) (undo-tree-id34 . -2) (undo-tree-id35 . -2) (undo-tree-id36 . -2) (undo-tree-id37 . -2) (undo-tree-id38 . -2) (undo-tree-id39 . -2) (undo-tree-id40 . -2) (undo-tree-id41 . -2) (undo-tree-id42 . -2) (undo-tree-id43 . -2) (undo-tree-id44 . -2) (undo-tree-id45 . -2) (undo-tree-id46 . -2) (undo-tree-id47 . -2) (undo-tree-id48 . -2) (undo-tree-id49 . -2) (undo-tree-id50 . -2) (undo-tree-id51 . -2) (undo-tree-id52 . -2) (undo-tree-id53 . -2) (undo-tree-id54 . -2) (undo-tree-id55 . -2) (undo-tree-id56 . -2) (undo-tree-id57 . -2) (undo-tree-id58 . -2) (undo-tree-id59 . -2) (undo-tree-id60 . -2) (undo-tree-id61 . -2) (undo-tree-id62 . -2) (undo-tree-id63 . -2) (undo-tree-id64 . -2) (undo-tree-id65 . -2) (undo-tree-id66 . -2) (undo-tree-id67 . -2) (undo-tree-id68 . -2) (undo-tree-id69 . -2) (undo-tree-id70 . -2) (undo-tree-id71 . -2) (undo-tree-id72 . -2) (undo-tree-id73 . -2) (undo-tree-id74 . -2) (#("
" 0 1 (fontified t)) . -5552) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) 5527) nil (25332 18881 730475 418000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t)) . -5601) (undo-tree-id100 . -1) 5602 (5601 . 5602) (5599 . 5601) (5598 . 5599) (t 25332 18881 742263 99000) 5586) nil (25332 19316 768830 614000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 4480) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1)) nil (25332 19316 768819 131000) 0 nil])
([nil nil ((5599 . 5600) (#(" " 0 1 (fontified t)) . -5599) (undo-tree-id143 . -1) (#(" " 0 1 (fontified t)) . -5600) (undo-tree-id144 . -1) (#(" " 0 1 (fontified t)) . -5601) (undo-tree-id145 . -1) (#(" " 0 1 (fontified t)) . -5602) (undo-tree-id146 . -1) (#(" " 0 1 (fontified t)) . -5603) (undo-tree-id147 . -1) (#(" " 0 1 (fontified t)) . -5604) (undo-tree-id148 . -1) (#(" " 0 1 (fontified t)) . -5605) (undo-tree-id149 . -1) (#(" " 0 1 (fontified nil)) . -5606) (undo-tree-id150 . -1) (#("	" 0 1 (fontified nil)) . 5607) (undo-tree-id151 . -1) (5599 . 5607) 5600 (5599 . 5600) (5598 . 5599) (t 25332 19316 782171 827000) 5598) nil (25332 19993 557401 558000) 0 nil])
([nil nil ((#("k
" 0 1 (fontified t) 1 2 (fontified t)) . 5599) (undo-tree-id141 . 1) (undo-tree-id142 . -2)) nil (25332 19993 557389 21000) 0 nil])
([nil nil ((5598 . 5599)) nil (25332 19993 557386 416000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . 5598) (undo-tree-id140 . 1)) nil (25332 19993 557385 483000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5660 . 5661) (nil fontified nil 5598 . 5661) (5598 . 5661)) nil (25332 19993 557383 381000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -5668) (undo-tree-id132 . -1) (#(" " 0 1 (fontified t)) . -5669) (undo-tree-id133 . -1) (#(" " 0 1 (fontified t)) . -5670) (undo-tree-id134 . -1) (#(" " 0 1 (fontified nil)) . -5671) (undo-tree-id135 . -1) (#("	" 0 1 (fontified nil)) . 5672) (undo-tree-id136 . -1) (5664 . 5672) 5665 (5662 . 5665) (#("		" 0 2 (fontified t)) . 5662) (undo-tree-id137 . -2) 5664 (5662 . 5664) (#("	" 0 1 (fontified t)) . 5662) (undo-tree-id138 . -1) 5663 (5662 . 5663) (#("i" 0 1 (fontified t)) . -5662) (undo-tree-id139 . -1) 5663 (5662 . 5663) (5661 . 5662) 5660) nil (25332 19993 557379 668000) 0 nil])
([nil nil ((#("		    
" 0 2 (fontified t) 2 6 (fontified t) 6 7 (fontified t)) . 5662) (undo-tree-id128 . 1) (undo-tree-id129 . -7) (undo-tree-id130 . -5) (undo-tree-id131 . -7) 5667) nil (25332 19993 557364 631000) 0 nil])
([nil nil ((#("(define-key evil-insert-state-map (kbd \"TAB\") 'tab-to-tab-stop)
" 0 39 (fontified t) 39 44 (fontified t face font-lock-string-face) 44 62 (fontified t) 62 63 (fontified t rear-nonsticky t) 63 64 (fontified t)) . 5598) (undo-tree-id121 . -64) (undo-tree-id122 . -64) (undo-tree-id123 . -62) (undo-tree-id124 . 64) (undo-tree-id125 . -1) (undo-tree-id126 . 2) (undo-tree-id127 . -63)) nil (25332 19993 557358 205000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1892 . 1893) (#("
" 0 1 (fontified nil)) . -1956) (1892 . 1957) 1891) nil (25332 19993 557349 223000) 0 nil])
([nil nil ((1893 . 1897)) nil (25332 19993 557347 250000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -1895) 1893) nil (25332 19993 557346 70000) 0 nil])
([nil nil ((1831 . 1834) (1822 . 1831) (#("tab-wi" 0 6 (fontified t)) . -1822) (undo-tree-id116 . -6) 1828 (1826 . 1828) (#("e" 0 1 (fontified t)) . -1826) (undo-tree-id117 . -1) (#("w" 0 1 (fontified t)) . -1827) (undo-tree-id118 . -1) 1828 (1819 . 1828) (#("q" 0 1 (fontified t)) . -1819) (undo-tree-id119 . -1) (#("t" 0 1 (fontified t)) . -1820) (undo-tree-id120 . -1) 1821 (1816 . 1821) (1815 . 1816) 1815) nil (25332 19993 557343 80000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . -1836) (undo-tree-id114 . -1) (#("	" 0 1 (fontified nil)) . 1837) (undo-tree-id115 . -1) (1835 . 1837) 1836 (1835 . 1836) (1834 . 1835) 1833) nil (25332 19993 557332 765000) 0 nil])
([nil nil ((#("(setq tab-width 2)
" 0 1 (fontified t) 1 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 18 (fontified t) 18 19 (fontified t)) . 1816) (undo-tree-id109 . -19) (undo-tree-id110 . 19) (undo-tree-id111 . -1) (undo-tree-id112 . 2) (undo-tree-id113 . -18)) nil (25332 19993 557325 167000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5667 . 5668) (#("
" 0 1 (fontified nil)) . -5686) (5667 . 5687)) nil (25332 19993 557318 557000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t)) . 5667) (undo-tree-id107 . -1) (undo-tree-id108 . -1)) nil (25332 19993 557316 715000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -5687) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (#(" " 0 1 (fontified nil)) . -5688) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (#("	" 0 1 (fontified nil)) . 5689) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (5687 . 5689) 5688 (5687 . 5688) (5686 . 5687) 5686) nil (25332 19993 557530 890000) 0 nil])
([nil nil ((5541 . 5542) (#("
" 0 1 (fontified t)) . 5541) 5496) nil (25332 20002 941583 690000) 0 nil] [nil nil ((5541 . 5542) (#("
" 0 1 (fontified t)) . 5541) 5496) ((5541 . 5542) (#(" " 0 1 (fontified t)) . 5541) (undo-tree-id152 . -1)) (25332 19993 557286 92000) 0 nil])
([nil nil ((5672 . 5680)) nil (25332 22095 146606 102000) 0 nil] [nil nil ((5222 . 5227) (#(" " 0 1 (fontified nil)) . -5222) (5221 . 5222) 5171) ((#("
" 0 1 (fontified t)) . 5221) (undo-tree-id162 . -1) (5222 . 5223) (#("	    " 0 5 (fontified t)) . 5222)) (25332 20002 771102 981000) 0 nil] [nil nil ((5302 . 5307) (#(" " 0 1 (fontified nil)) . -5302) (5301 . 5302) 5251) ((#("
" 0 1 (fontified t)) . 5301) (undo-tree-id159 . -1) (5302 . 5303) (#("	    " 0 5 (fontified t)) . 5302)) (25332 19999 783992 563000) 0 nil])
nil
([nil nil ((5741 . 5742) (#("" 0 1 (fontified t)) . -5741) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) 5742 (5741 . 5742) (5739 . 5741) (#(";" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -5739) (undo-tree-id180 . -1) 5740 (5732 . 5740) (5730 . 5732) (5724 . 5730) (#("u" 0 1 (fontified t face font-lock-builtin-face)) . -5724) (undo-tree-id181 . -1) 5725 (5722 . 5725) (#("n" 0 1 (fontified t face font-lock-builtin-face)) . -5722) (undo-tree-id182 . -1) (#("e" 0 1 (fontified t face font-lock-builtin-face)) . -5723) (undo-tree-id183 . -1) 5724 (5721 . 5724) (#(";" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -5721) (undo-tree-id184 . -1) 5722 (5721 . 5722) (5719 . 5721) (#(")" 0 1 (fontified t)) . -5719) (undo-tree-id185 . -1) (undo-tree-id186 . 1) (undo-tree-id187 . -1) 5720 (5719 . 5720) (5707 . 5719) (5696 . 5707) (#("use-pack" 0 8 (fontified t)) . -5696) (undo-tree-id188 . -8) 5704 (5695 . 5704) (5694 . 5695) (5693 . 5694) 5692) nil (25332 22095 146601 724000) 0 nil])
([nil nil ((5222 . 5227) (#(" " 0 1 (fontified nil)) . -5222) (undo-tree-id160 . -1) (5221 . 5222) (5221 . 5222) (#("
" 0 1 (fontified t)) . 5221) (#("	    " 0 5 (fontified t)) . 5222) 5171) ((5221 . 5227) (#(" " 0 1 (fontified nil)) . 5221) (undo-tree-id161 . -1) (#("
" 0 1 (fontified t)) . 5221) (5222 . 5223) (#("	    " 0 5 (fontified t)) . 5222)) (25332 20002 770844 42000) 0 nil])
([nil nil ((5302 . 5307) (#(" " 0 1 (fontified nil)) . -5302) (undo-tree-id155 . -1) (5301 . 5302) (5301 . 5302) (#("
" 0 1 (fontified t)) . 5301) (#("	    " 0 5 (fontified t)) . 5302) 5251) ((5301 . 5307) (#(" " 0 1 (fontified nil)) . 5301) (undo-tree-id158 . -1) (#("
" 0 1 (fontified t)) . 5301) (5302 . 5303) (#("	    " 0 5 (fontified t)) . 5302)) (25332 19999 454744 687000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5799 . 5800) (nil fontified nil 5742 . 5800) (5742 . 5800) 5741) nil (25332 22095 146549 646000) 0 nil])
nil
([nil nil ((5302 . 5307) (#(" " 0 1 (fontified nil)) . -5302) (undo-tree-id154 . -1) (5301 . 5302) (5301 . 5302) (#("
" 0 1 (fontified t)) . 5301) (#("	    " 0 5 (fontified t)) . 5302) 5251) ((5301 . 5307) (#(" " 0 1 (fontified nil)) . 5301) (undo-tree-id157 . -1) (#("
" 0 1 (fontified t)) . 5301) (5302 . 5303) (#("	    " 0 5 (fontified t)) . 5302)) (25332 19999 70955 582000) 0 nil])
([nil nil (5799) nil (25332 22095 146694 714000) 0 nil])
([nil nil ((5302 . 5307) (#(" " 0 1 (fontified nil)) . -5302) (undo-tree-id153 . -1) (5301 . 5302) (5301 . 5302) (#("
" 0 1 (fontified t)) . 5301) (#("	    " 0 5 (fontified t)) . 5302) 5251) ((5301 . 5307) (#(" " 0 1 (fontified nil)) . 5301) (undo-tree-id156 . -1) (#("
" 0 1 (fontified t)) . 5301) (5302 . 5303) (#("	    " 0 5 (fontified t)) . 5302)) (25332 19999 70754 169000) 0 nil])
([nil nil ((#("" 0 1 (fontified t)) . 5741) (undo-tree-id194 . -1) (undo-tree-id195 . 1) (undo-tree-id196 . -1)) nil (25332 22305 118453 22000) 0 nil] [nil nil ((#("(" 0 1 (fontified t)) . 5742)) ((5742 . 5743)) (25332 22095 146542 813000) 0 nil])
nil
([nil nil ((#("(" 0 1 (fontified t)) . 5741) (undo-tree-id191 . 1) (undo-tree-id192 . 1) (undo-tree-id193 . -1)) nil (25332 22305 118448 229000) 0 nil])
nil
([nil nil ((5798 . 5799)) nil (25332 22305 118443 414000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 5798) (undo-tree-id189 . 1) (undo-tree-id190 . -1)) nil (25332 22306 548789 833000) 0 nil])
([nil nil ((5741 . 5742)) nil (25332 22331 993069 486000) 0 nil] [nil nil ((5708 . 5710)) ((#("\"'" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face)) . 5708) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1)) (25332 22306 32379 380000) 0 nil])
([nil nil ((5799 . 5800)) nil (25332 22331 993068 358000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t face font-lock-string-face)) . 5709)) ((5709 . 5710)) (25332 22305 508057 278000) 0 nil])
([nil nil ((1359 . 1675) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 18 (fontified nil) 18 19 (fontified nil) 19 22 (fontified nil face font-lock-comment-delimiter-face) 22 60 (fontified nil face font-lock-comment-face) 60 61 (fontified nil) 61 64 (fontified nil face font-lock-comment-delimiter-face) 64 125 (fontified nil face font-lock-comment-face) 125 126 (fontified nil) 126 129 (fontified nil face font-lock-comment-delimiter-face) 129 153 (fontified nil face font-lock-comment-face) 153 183 (fontified nil face font-lock-comment-face) 183 184 (fontified nil) 184 187 (fontified nil face font-lock-comment-delimiter-face) 187 237 (fontified nil face font-lock-comment-face) 237 266 (fontified nil) 266 274 (fontified nil face font-lock-builtin-face) 274 300 (fontified nil) 300 307 (fontified nil face font-lock-builtin-face) 307 316 (fontified nil)) . -1359) (1319 . 1358) (#("
" 0 1 (fontified nil)) . -1319) (1157 . 1320) (#(" " 0 1 (fontified nil)) . 1157) (884 . 1158) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 22 (fontified nil) 22 23 (fontified nil) 23 26 (fontified nil face font-lock-comment-delimiter-face) 26 68 (fontified nil face font-lock-comment-face) 68 69 (fontified nil) 69 72 (fontified nil face font-lock-comment-delimiter-face) 72 133 (fontified nil face font-lock-comment-face) 133 134 (fontified nil) 134 137 (fontified nil face font-lock-comment-delimiter-face) 137 191 (fontified nil face font-lock-comment-face) 191 192 (fontified nil) 192 195 (fontified nil face font-lock-comment-delimiter-face) 195 245 (fontified nil face font-lock-comment-face) 245 274 (fontified nil) 274 426 (fontified nil) 426 463 (fontified nil)) . -884) 5799) nil (25332 22331 993061 533000) 0 nil])
([nil nil ((5720 . 5721)) ((#("\"" 0 1 (fontified t face font-lock-string-face)) . 5720)) (25332 22305 118573 284000) 0 nil])
([nil nil ((#("(setq inhibit-startup-message t)
" 0 1 (fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 33 (fontified t)) . 26) (undo-tree-id7 . -33) (undo-tree-id8 . 33) (undo-tree-id9 . -1) (undo-tree-id10 . 2) (undo-tree-id11 . -32) (t 25332 22332 7391 93000)) nil (25332 22470 766601 188000) 0 nil])
([nil nil ((5800 . 5802)) ((#("ku" 0 2 (fontified t help-echo "Easy to misread; consider moving the element to the next line" face (font-lock-warning-face))) . 5800) (undo-tree-id197 . -1) (undo-tree-id198 . -1)) (25332 22305 118423 601000) 0 nil])
([nil nil ((nil rear-nonsticky nil 203 . 204) (#("
" 0 1 (fontified nil)) . -236) (203 . 237) 182) nil (25332 22470 766594 88000) 0 nil])
nil
([nil nil ((#("
" 0 1 (fontified t)) . 26) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1)) nil (25332 22470 766592 486000) 0 nil])
([nil nil ((#(";; take off your clothes
" 0 3 (face font-lock-comment-delimiter-face fontified t) 3 24 (face font-lock-comment-face fontified t) 24 25 (face font-lock-comment-face fontified t)) . 26) (undo-tree-id2 . -25)) nil (25332 22470 766583 958000) 0 nil])
([nil nil ((1 . 2)) nil (25332 24896 917703 432000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1) (undo-tree-id566 . -1)) ((1 . 2)) (25332 24899 469976 498000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 549)) ((549 . 550)) (25332 24899 894976 400000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 549)) ((549 . 550)) (25332 24954 315755 945000) 0 nil])
([nil nil ((1331 . 1647) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 19 (fontified t) 19 22 (fontified t face font-lock-comment-delimiter-face) 22 60 (fontified t face font-lock-comment-face) 60 61 (fontified t) 61 64 (fontified t face font-lock-comment-delimiter-face) 64 125 (fontified t face font-lock-comment-face) 125 126 (fontified t) 126 129 (fontified t face font-lock-comment-delimiter-face) 129 183 (fontified t face font-lock-comment-face) 183 184 (fontified t) 184 187 (fontified t face font-lock-comment-delimiter-face) 187 193 (fontified t face font-lock-comment-face) 193 237 (fontified t face font-lock-comment-face) 237 266 (fontified t) 266 274 (fontified t face font-lock-builtin-face) 274 300 (fontified t) 300 307 (fontified t face font-lock-builtin-face) 307 316 (fontified t)) . 1331) (1291 . 1330) (#("
" 0 1 (fontified nil)) . 1291) (1129 . 1292) (#(" " 0 1 (fontified nil)) . 1129) (856 . 1130) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 23 (fontified t) 23 26 (fontified t face font-lock-comment-delimiter-face) 26 68 (fontified t face font-lock-comment-face) 68 69 (fontified t) 69 72 (fontified t face font-lock-comment-delimiter-face) 72 133 (fontified t face font-lock-comment-face) 133 134 (fontified t) 134 137 (fontified t face font-lock-comment-delimiter-face) 137 191 (fontified t face font-lock-comment-face) 191 192 (fontified t) 192 195 (fontified t face font-lock-comment-delimiter-face) 195 245 (fontified t face font-lock-comment-face) 245 437 (fontified t) 437 474 (fontified t)) . 856)) ((856 . 1330) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages " 0 23 (fontified t) 23 26 (fontified t face font-lock-comment-delimiter-face) 26 68 (fontified t face font-lock-comment-face) 68 69 (fontified t) 69 72 (fontified t face font-lock-comment-delimiter-face) 72 133 (fontified t face font-lock-comment-face) 133 134 (fontified t) 134 137 (fontified t face font-lock-comment-delimiter-face) 137 191 (fontified t face font-lock-comment-face) 191 192 (fontified t) 192 195 (fontified t face font-lock-comment-delimiter-face) 195 245 (fontified t face font-lock-comment-face) 245 273 (fontified nil) 273 274 (fontified nil)) . 856) (1129 . 1130) (#("
	 '(org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package)
" 0 1 (fontified t) 1 162 (fontified nil) 162 163 (fontified nil)) . 1129) (1291 . 1292) (#(")
 '(warning-suppress-types '((comp))))" 0 2 (fontified t) 2 39 (fontified t)) . 1291) (1331 . 1647) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 19 (fontified t) 19 22 (fontified t face font-lock-comment-delimiter-face) 22 60 (fontified t face font-lock-comment-face) 60 61 (fontified t) 61 64 (fontified t face font-lock-comment-delimiter-face) 64 125 (fontified t face font-lock-comment-face) 125 126 (fontified t) 126 129 (fontified t face font-lock-comment-delimiter-face) 129 183 (fontified t face font-lock-comment-face) 183 184 (fontified t) 184 187 (fontified t face font-lock-comment-delimiter-face) 187 237 (fontified t face font-lock-comment-face) 237 266 (fontified t) 266 274 (fontified t face font-lock-builtin-face) 274 300 (fontified t) 300 307 (fontified t face font-lock-builtin-face) 307 316 (fontified t)) . 1331)) (25332 24954 912222 795000) 0 nil])
([nil nil ((1331 . 1647) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 19 (fontified t) 19 22 (fontified t face font-lock-comment-delimiter-face) 22 60 (fontified t face font-lock-comment-face) 60 61 (fontified t) 61 64 (fontified t face font-lock-comment-delimiter-face) 64 125 (fontified t face font-lock-comment-face) 125 126 (fontified t) 126 129 (fontified t face font-lock-comment-delimiter-face) 129 183 (fontified t face font-lock-comment-face) 183 184 (fontified t) 184 187 (fontified t face font-lock-comment-delimiter-face) 187 237 (fontified t face font-lock-comment-face) 237 266 (fontified t) 266 274 (fontified t face font-lock-builtin-face) 274 300 (fontified t) 300 307 (fontified t face font-lock-builtin-face) 307 316 (fontified t)) . 1331) (1291 . 1330) (#("
" 0 1 (fontified nil)) . 1291) (1129 . 1292) (#(" " 0 1 (fontified nil)) . 1129) (856 . 1130) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 23 (fontified t) 23 26 (fontified t face font-lock-comment-delimiter-face) 26 68 (fontified t face font-lock-comment-face) 68 69 (fontified t) 69 72 (fontified t face font-lock-comment-delimiter-face) 72 133 (fontified t face font-lock-comment-face) 133 134 (fontified t) 134 137 (fontified t face font-lock-comment-delimiter-face) 137 191 (fontified t face font-lock-comment-face) 191 192 (fontified t) 192 195 (fontified t face font-lock-comment-delimiter-face) 195 245 (fontified t face font-lock-comment-face) 245 273 (fontified t) 273 274 (fontified t) 274 435 (fontified t) 435 437 (fontified t) 437 474 (fontified t)) . 856)) ((856 . 1330) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages " 0 23 (fontified t) 23 26 (fontified t face font-lock-comment-delimiter-face) 26 68 (fontified t face font-lock-comment-face) 68 69 (fontified t) 69 72 (fontified t face font-lock-comment-delimiter-face) 72 133 (fontified t face font-lock-comment-face) 133 134 (fontified t) 134 137 (fontified t face font-lock-comment-delimiter-face) 137 191 (fontified t face font-lock-comment-face) 191 192 (fontified t) 192 195 (fontified t face font-lock-comment-delimiter-face) 195 245 (fontified t face font-lock-comment-face) 245 273 (fontified nil) 273 274 (fontified nil)) . 856) (undo-tree-id1831 . -273) (undo-tree-id1832 . -273) (1129 . 1130) (#("
	 '(org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package)
" 0 1 (fontified t) 1 162 (fontified nil) 162 163 (fontified nil)) . 1129) (undo-tree-id1833 . -55) (undo-tree-id1834 . -55) (1291 . 1292) (#(")
 '(warning-suppress-types '((comp))))" 0 39 (fontified t)) . 1291) (1331 . 1647) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 19 (fontified t) 19 22 (fontified t face font-lock-comment-delimiter-face) 22 60 (fontified t face font-lock-comment-face) 60 61 (fontified t) 61 64 (fontified t face font-lock-comment-delimiter-face) 64 125 (fontified t face font-lock-comment-face) 125 126 (fontified t) 126 129 (fontified t face font-lock-comment-delimiter-face) 129 170 (fontified t face font-lock-comment-face) 170 183 (fontified t face font-lock-comment-face) 183 184 (fontified t) 184 187 (fontified t face font-lock-comment-delimiter-face) 187 237 (fontified t face font-lock-comment-face) 237 266 (fontified t) 266 274 (fontified t face font-lock-builtin-face) 274 300 (fontified t) 300 307 (fontified t face font-lock-builtin-face) 307 316 (fontified t)) . 1331) (t 25332 24832 649199 750000)) (25332 24956 321262 420000) 0 nil])
([nil nil ((5785 . 5798) (t 25332 24832 649199 750000)) ((#("
ahmed salah " 0 1 (fontified t) 1 13 (fontified t)) . 5785) (undo-tree-id1835 . -13)) (25332 24959 673856 288000) 0 nil])
([nil nil ((5820 . 5832) (#(" " 0 1 (fontified nil)) . 5819) (5810 . 5821) (#(" " 0 1 (fontified nil)) . 5809) (5798 . 5811)) ((#("


haemdslf 
" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 11 (fontified nil) 11 12 (fontified nil) 12 13 (fontified nil)) . 5798) (undo-tree-id1860 . -13) (undo-tree-id1862 . -13) (undo-tree-id1864 . -13) (undo-tree-id1866 . -13) (undo-tree-id1867 . -13) (undo-tree-id1869 . -13) (undo-tree-id1871 . -13) (5809 . 5810) (#("fsd
fsd
f 
" 0 3 (fontified t) 3 4 (fontified t) 4 7 (fontified t) 7 8 (fontified t) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil)) . 5810) (undo-tree-id1873 . -11) (undo-tree-id1875 . -11) (undo-tree-id1877 . -11) (undo-tree-id1879 . -11) (undo-tree-id1880 . -11) (undo-tree-id1882 . -11) (undo-tree-id1884 . -11) (5819 . 5820) (#("sd
f s
f
dsf" 0 2 (fontified t) 2 3 (fontified t) 3 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 12 (fontified t)) . 5820) (undo-tree-id1886 . -2) (undo-tree-id1888 . -9) (undo-tree-id1890 . -9)) (25332 24960 325147 18000) 0 nil])
([nil nil ((#("

ahmed salah 


haemdslf
fsd
fsd
f
sd
f s
f
dsf" 0 1 (fontified t) 1 2 (fontified t) 2 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 25 (fontified t) 25 26 (fontified t) 26 29 (fontified t) 29 30 (fontified t) 30 33 (fontified t) 33 34 (fontified t) 34 35 (fontified t) 35 36 (fontified t) 36 38 (fontified t) 38 39 (fontified t) 39 42 (fontified t) 42 43 (fontified t) 43 44 (fontified t) 44 45 (fontified t) 45 48 (fontified t)) . 5784) (undo-tree-id1892 . -36) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -2) (undo-tree-id1896 . -36) (undo-tree-id1897 . -36) (undo-tree-id1898 . -36) (undo-tree-id1899 . -36) (undo-tree-id1900 . -36) (undo-tree-id1901 . -36) (undo-tree-id1902 . -36) (undo-tree-id1903 . -36) (undo-tree-id1904 . -36) (undo-tree-id1905 . -36) (undo-tree-id1906 . -36) (undo-tree-id1907 . -36) (undo-tree-id1908 . -36) (undo-tree-id1909 . -36) (undo-tree-id1910 . -36) (undo-tree-id1911 . -39) (undo-tree-id1912 . -39) (undo-tree-id1913 . -39) (undo-tree-id1914 . -39) (undo-tree-id1915 . -39) (undo-tree-id1916 . -39) (undo-tree-id1917 . -39) (undo-tree-id1918 . -39) (undo-tree-id1919 . -39) (undo-tree-id1920 . -39) (undo-tree-id1921 . -43) (undo-tree-id1922 . -43) (undo-tree-id1923 . -43) (undo-tree-id1924 . -43) (undo-tree-id1925 . -43) (undo-tree-id1926 . -39) (undo-tree-id1927 . -39) (undo-tree-id1928 . -39) (undo-tree-id1929 . -39) (undo-tree-id1930 . -39) (undo-tree-id1931 . -36) (undo-tree-id1932 . -36) (undo-tree-id1933 . -36) (undo-tree-id1934 . -36) (undo-tree-id1935 . -36) (undo-tree-id1936 . -36) (undo-tree-id1937 . -36) (undo-tree-id1938 . -36) (undo-tree-id1939 . -36) (undo-tree-id1940 . -36) (undo-tree-id1941 . -34) (undo-tree-id1942 . -34) (undo-tree-id1943 . -34) (undo-tree-id1944 . -34) (undo-tree-id1945 . -34) (undo-tree-id1946 . -34) (undo-tree-id1947 . -34) (undo-tree-id1948 . -34) (undo-tree-id1949 . -34) (undo-tree-id1950 . -34) (undo-tree-id1951 . -30) (undo-tree-id1952 . -30) (undo-tree-id1953 . -30) (undo-tree-id1954 . -30) (undo-tree-id1955 . -30) (undo-tree-id1956 . -30) (undo-tree-id1957 . -30) (undo-tree-id1958 . -30) (undo-tree-id1959 . -30) (undo-tree-id1960 . -30) (undo-tree-id1961 . -26) (undo-tree-id1962 . -26) (undo-tree-id1963 . -26) (undo-tree-id1964 . -26) (undo-tree-id1965 . -26) (undo-tree-id1966 . -26) (undo-tree-id1967 . -26) (undo-tree-id1968 . -26) (undo-tree-id1969 . -26) (undo-tree-id1970 . -26) (undo-tree-id1971 . -17) (undo-tree-id1972 . -17) (undo-tree-id1973 . -17) (undo-tree-id1974 . -17) (undo-tree-id1975 . -17) (undo-tree-id1976 . -17) (undo-tree-id1977 . -17) (undo-tree-id1978 . -17) (undo-tree-id1979 . -17) (undo-tree-id1980 . -17) (undo-tree-id1981 . -16) (undo-tree-id1982 . -16) (undo-tree-id1983 . -16) (undo-tree-id1984 . -16) (undo-tree-id1985 . -16) (undo-tree-id1986 . -16) (undo-tree-id1987 . -16) (undo-tree-id1988 . -16) (undo-tree-id1989 . -16) (undo-tree-id1990 . -16) (undo-tree-id1991 . -15) (undo-tree-id1992 . -15) (undo-tree-id1993 . -15) (undo-tree-id1994 . -15) (undo-tree-id1995 . -15) (undo-tree-id1996 . -15) (undo-tree-id1997 . -15) (undo-tree-id1998 . -15) (undo-tree-id1999 . -15) (undo-tree-id2000 . -15) (undo-tree-id2001 . -2) (undo-tree-id2002 . -2) (undo-tree-id2003 . -2) (undo-tree-id2004 . -2) (undo-tree-id2005 . -2) (undo-tree-id2006 . -2) (undo-tree-id2007 . -2) (undo-tree-id2008 . -2) (undo-tree-id2009 . -2) (undo-tree-id2010 . -2) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) 5785) nil (25332 24984 770961 290000) 0 nil] [nil nil ((#("
f s
f
dsf" 0 1 (fontified t) 1 5 (fontified t) 5 7 (fontified t) 7 10 (fontified t)) . 5822) (undo-tree-id727 . -3) (undo-tree-id728 . -1) (undo-tree-id729 . -5) (undo-tree-id731 . -1) (undo-tree-id733 . -1) (undo-tree-id735 . -1) (undo-tree-id737 . -2) (undo-tree-id739 . -2) (undo-tree-id741 . -3) (undo-tree-id743 . -3) (undo-tree-id745 . -3) (undo-tree-id747 . -4) (undo-tree-id749 . -4) (undo-tree-id751 . 6) (undo-tree-id753 . -5) (undo-tree-id755 . -5) (undo-tree-id757 . -6) (undo-tree-id759 . -6) (undo-tree-id761 . -6) (undo-tree-id763 . -6) (undo-tree-id765 . -6) (undo-tree-id767 . 4) (undo-tree-id769 . -7) (undo-tree-id771 . -7) (undo-tree-id773 . -8) (undo-tree-id775 . -8) (undo-tree-id777 . -8) (undo-tree-id779 . -9) (undo-tree-id781 . -9) (undo-tree-id783 . -10) (undo-tree-id785 . -10) (undo-tree-id787 . -10) (undo-tree-id789 . -10) (undo-tree-id791 . -10) (undo-tree-id793 . -10) (undo-tree-id795 . -10) (undo-tree-id797 . -10) (undo-tree-id799 . -9) (undo-tree-id801 . -9) (undo-tree-id803 . -9) (undo-tree-id805 . -9) (undo-tree-id807 . -9) (undo-tree-id809 . -9) (undo-tree-id811 . -9) (undo-tree-id813 . -9) (undo-tree-id815 . -9) (undo-tree-id817 . -9) (undo-tree-id819 . -9) (undo-tree-id821 . -9) (undo-tree-id823 . -9) (undo-tree-id825 . -9) (undo-tree-id827 . -9) (undo-tree-id829 . -5) (undo-tree-id831 . -5) (undo-tree-id833 . -5) (undo-tree-id835 . -5) (undo-tree-id837 . -5) (undo-tree-id839 . -3) (undo-tree-id841 . -3) (undo-tree-id843 . -3) (undo-tree-id845 . -3) (undo-tree-id847 . -3) (undo-tree-id849 . -3) (undo-tree-id851 . -3) (undo-tree-id853 . -3) (undo-tree-id855 . -3) (undo-tree-id857 . -3) (undo-tree-id859 . -3) (undo-tree-id861 . -3) (undo-tree-id863 . -3) 5825) ((5822 . 5832)) (25332 24952 207272 73000) 0 nil])
([nil nil ((1331 . 1647) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1331) (1291 . 1330) (#("
" 0 1 (fontified nil)) . -1291) (1129 . 1292) (#(" " 0 1 (fontified nil)) . 1129) (856 . 1130) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 474 (fontified nil)) . -856) (t 25332 24984 795288 160000)) nil (25332 26525 598790 619000) 0 nil])
([nil nil ((5854 . 5857) (5853 . 5854) (5852 . 5853) (#(" " 0 1 (fontified nil)) . -5850) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (5852 . 5853) (5850 . 5852) (5849 . 5850) (5848 . 5849) (5847 . 5848) (5845 . 5847) (5844 . 5845) (5842 . 5844) (#(" " 0 1 (fontified nil)) . 5841) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (5842 . 5843) (5838 . 5842) (5837 . 5838) (5823 . 5837) (5822 . 5823) 5821) ((#("
" 0 1 (fontified t)) . 5822) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (#("ldskjflkfjls f" 0 14 (fontified nil)) . 5823) (undo-tree-id985 . -14) (undo-tree-id986 . -14) (undo-tree-id987 . -14) (undo-tree-id988 . -14) (undo-tree-id989 . -14) (undo-tree-id990 . -14) (undo-tree-id991 . -14) (undo-tree-id992 . -14) (undo-tree-id993 . -14) (undo-tree-id994 . -14) (undo-tree-id995 . -14) (undo-tree-id996 . -14) (undo-tree-id997 . -14) (undo-tree-id998 . -14) (undo-tree-id999 . -14) (undo-tree-id1000 . -14) (undo-tree-id1001 . -14) (undo-tree-id1002 . -14) (undo-tree-id1003 . -14) (undo-tree-id1004 . -14) (undo-tree-id1005 . -14) (undo-tree-id1006 . -14) (undo-tree-id1007 . -14) (undo-tree-id1008 . -14) (undo-tree-id1009 . -14) (undo-tree-id1010 . -14) (undo-tree-id1011 . -14) (undo-tree-id1012 . -14) (undo-tree-id1013 . -14) (#("
" 0 1 (fontified t)) . 5837) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (#("s f " 0 3 (fontified nil) 3 4 (fontified nil)) . 5838) (undo-tree-id1043 . -4) (undo-tree-id1044 . -4) (undo-tree-id1045 . -4) (undo-tree-id1046 . -4) (undo-tree-id1047 . -4) (undo-tree-id1048 . -4) (undo-tree-id1049 . -4) (undo-tree-id1050 . -4) (undo-tree-id1051 . -4) (undo-tree-id1052 . -4) (undo-tree-id1053 . -4) (undo-tree-id1054 . -4) (undo-tree-id1055 . -4) (undo-tree-id1056 . -4) (undo-tree-id1057 . -4) (undo-tree-id1058 . -4) (undo-tree-id1059 . -4) (undo-tree-id1060 . -4) (undo-tree-id1061 . -4) (undo-tree-id1062 . -4) (undo-tree-id1063 . -4) (undo-tree-id1064 . -4) (undo-tree-id1065 . -4) (undo-tree-id1066 . -4) (undo-tree-id1067 . -4) (undo-tree-id1068 . -4) (undo-tree-id1069 . -4) (undo-tree-id1070 . -4) (undo-tree-id1071 . -4) (#("
" 0 1 (fontified nil)) . 5842) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (5841 . 5842) (#("fa" 0 2 (fontified nil)) . 5842) (undo-tree-id1096 . -2) (undo-tree-id1097 . -2) (undo-tree-id1098 . -2) (undo-tree-id1099 . -2) (undo-tree-id1100 . -2) (undo-tree-id1101 . -2) (undo-tree-id1102 . -2) (undo-tree-id1103 . -2) (undo-tree-id1104 . -2) (undo-tree-id1105 . -2) (undo-tree-id1106 . -2) (undo-tree-id1107 . -2) (undo-tree-id1108 . -2) (undo-tree-id1109 . -2) (undo-tree-id1110 . -2) (undo-tree-id1111 . -2) (undo-tree-id1112 . -2) (undo-tree-id1113 . -2) (undo-tree-id1114 . -2) (undo-tree-id1115 . -2) (undo-tree-id1116 . -2) (undo-tree-id1117 . -2) (undo-tree-id1118 . -2) (undo-tree-id1119 . -2) (#("
" 0 1 (fontified t)) . 5844) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (#("sf" 0 2 (fontified nil)) . 5845) (undo-tree-id1144 . -2) (undo-tree-id1145 . -2) (undo-tree-id1146 . -2) (undo-tree-id1147 . -2) (undo-tree-id1148 . -2) (undo-tree-id1149 . -2) (undo-tree-id1150 . -2) (undo-tree-id1151 . -2) (undo-tree-id1152 . -2) (undo-tree-id1153 . -2) (undo-tree-id1154 . -2) (undo-tree-id1155 . -2) (undo-tree-id1156 . -2) (undo-tree-id1157 . -2) (undo-tree-id1158 . -2) (undo-tree-id1159 . -2) (undo-tree-id1160 . -2) (undo-tree-id1161 . -2) (undo-tree-id1162 . -2) (undo-tree-id1163 . -2) (undo-tree-id1164 . -2) (undo-tree-id1165 . -2) (undo-tree-id1166 . -2) (undo-tree-id1167 . -2) (#("
" 0 1 (fontified t)) . 5847) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (#("a" 0 1 (fontified nil)) . 5848) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (#("
" 0 1 (fontified t)) . 5849) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (#(" a" 0 1 (fontified nil) 1 2 (fontified nil)) . 5850) (undo-tree-id1240 . -2) (undo-tree-id1241 . -2) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -2) (undo-tree-id1248 . -2) (undo-tree-id1249 . -2) (undo-tree-id1250 . -2) (undo-tree-id1251 . -2) (undo-tree-id1252 . -2) (undo-tree-id1253 . -2) (undo-tree-id1254 . -2) (undo-tree-id1255 . -2) (undo-tree-id1256 . -2) (undo-tree-id1257 . -2) (undo-tree-id1258 . -2) (undo-tree-id1259 . -2) (undo-tree-id1260 . -2) (undo-tree-id1261 . -2) (undo-tree-id1262 . -2) (undo-tree-id1263 . -2) (#("
" 0 1 (fontified nil)) . 5852) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (5850 . 5851) (#("f" 0 1 (fontified nil)) . 5852) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (#("
" 0 1 (fontified t)) . 5853) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (#("da " 0 3 (fontified t)) . 5854) (undo-tree-id1321 . -2) (undo-tree-id1322 . -2) (undo-tree-id1323 . -2) (undo-tree-id1324 . -2) (undo-tree-id1325 . -2) (undo-tree-id1326 . -2) (undo-tree-id1327 . -2) (undo-tree-id1328 . -2) (undo-tree-id1329 . -2) (undo-tree-id1330 . -2) (undo-tree-id1331 . -2) (undo-tree-id1332 . -2) (undo-tree-id1333 . -2) (undo-tree-id1334 . -2) (undo-tree-id1335 . -2) (undo-tree-id1336 . -2) (undo-tree-id1337 . -2) (undo-tree-id1338 . -2)) (25332 24950 645073 786000) 0 nil] [nil nil ((5846 . 5847) (5845 . 5846) (5843 . 5845) (5842 . 5843) (5839 . 5842) (5838 . 5839) (5837 . 5838) (5836 . 5837) (5834 . 5836) (#(" " 0 1 (fontified nil)) . 5833) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (5834 . 5835) (5824 . 5834) (5823 . 5824) (5822 . 5823) 5821) ((#("
" 0 1 (fontified t)) . 5822) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (#("
" 0 1 (fontified t)) . 5823) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (#("salkfjslf " 0 9 (fontified nil) 9 10 (fontified nil)) . 5824) (undo-tree-id901 . -10) (undo-tree-id902 . -10) (undo-tree-id903 . -10) (undo-tree-id904 . -10) (undo-tree-id905 . -10) (#("
" 0 1 (fontified nil)) . 5834) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (5833 . 5834) (#("as" 0 2 (fontified nil)) . 5834) (undo-tree-id911 . -2) (undo-tree-id912 . -2) (undo-tree-id913 . -2) (undo-tree-id914 . -2) (undo-tree-id915 . -2) (#("
" 0 1 (fontified t)) . 5836) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (#("f" 0 1 (fontified nil)) . 5837) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (#("
" 0 1 (fontified t)) . 5838) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (#("sdf" 0 3 (fontified nil)) . 5839) (undo-tree-id931 . -3) (undo-tree-id932 . -3) (undo-tree-id933 . -3) (undo-tree-id934 . -3) (undo-tree-id935 . -3) (#("
" 0 1 (fontified t)) . 5842) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (#("sf" 0 2 (fontified nil)) . 5843) (undo-tree-id941 . -2) (#("
" 0 1 (fontified t)) . 5845) (undo-tree-id942 . -1) (#("s" 0 1 (fontified t)) . 5846)) (25332 24933 867371 280000) 0 nil])
([nil nil ((1331 . 1647) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1331) (1291 . 1330) (#("
" 0 1 (fontified nil)) . -1291) (1129 . 1292) (#(" " 0 1 (fontified nil)) . 1129) (856 . 1130) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 474 (fontified nil)) . -856) (t 25332 26525 609270 358000)) nil (25332 64372 424492 179000) 0 nil])
nil
nil
([nil nil ((#(" " 0 1 (fontified nil)) . -5678) (undo-tree-id0 . -1) (#("	" 0 1 (fontified nil)) . 5679) (undo-tree-id1 . -1) (5677 . 5679) 5678 (5677 . 5678) (t 25332 64372 445705 865000)) nil (25333 8089 180138 190000) 0 nil])
([nil nil ((1331 . 1647) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1331) (1291 . 1330) (#("
" 0 1 (fontified nil)) . -1291) (1129 . 1292) (#(" " 0 1 (fontified nil)) . 1129) (856 . 1130) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 474 (fontified nil)) . -856) (t 25333 8089 204295 295000)) nil (25333 8101 158176 861000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5946 . 5947) (nil fontified nil 5785 . 5947) (5785 . 5947) (t 25333 8101 172556 636000)) nil (25333 9155 838697 825000) 0 nil])
([nil nil ((5785 . 5786) 5805) nil (25333 9155 838694 610000) 0 nil])
([nil nil ((5957 . 5958) (1340 . 1656) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 19 (fontified nil) 19 22 (face font-lock-comment-delimiter-face fontified nil) 22 60 (face font-lock-comment-face fontified nil) 60 61 (fontified nil) 61 64 (face font-lock-comment-delimiter-face fontified nil) 64 125 (face font-lock-comment-face fontified nil) 125 126 (fontified nil) 126 129 (face font-lock-comment-delimiter-face fontified nil) 129 170 (face font-lock-comment-face fontified nil) 170 183 (face font-lock-comment-face fontified nil) 183 184 (fontified nil) 184 187 (face font-lock-comment-delimiter-face fontified nil) 187 237 (face font-lock-comment-face fontified nil) 237 266 (fontified nil) 266 274 (face font-lock-builtin-face fontified nil) 274 300 (fontified nil) 300 307 (face font-lock-builtin-face fontified nil) 307 316 (fontified nil)) . -1340) (1300 . 1339) (#("
" 0 1 (fontified nil)) . -1300) (1129 . 1301) (#(" " 0 1 (fontified nil)) . 1129) (856 . 1130) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 23 (fontified nil) 23 26 (face font-lock-comment-delimiter-face fontified nil) 26 68 (face font-lock-comment-face fontified nil) 68 69 (fontified nil) 69 72 (face font-lock-comment-delimiter-face fontified nil) 72 133 (face font-lock-comment-face fontified nil) 133 134 (fontified nil) 134 137 (face font-lock-comment-delimiter-face fontified nil) 137 191 (face font-lock-comment-face fontified nil) 191 192 (fontified nil) 192 195 (face font-lock-comment-delimiter-face fontified nil) 195 245 (face font-lock-comment-face fontified nil) 245 474 (fontified nil)) . -856) 5948) nil (25333 9155 838685 98000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -5957) (undo-tree-id28 . 1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) 5958 (5957 . 5958) (t . 0)) nil (25333 9314 622572 935000) 0 nil])
([nil nil ((5934 . 5935) (#("'" 0 1 (fontified nil)) . -5934) (undo-tree-id0 . -1) 5935 (5934 . 5935) (5904 . 5905) (#("'" 0 1 (fontified nil)) . -5904) (undo-tree-id1 . -1) 5905 (5904 . 5905) (5893 . 5894) (#("'" 0 1 (fontified nil)) . -5893) (undo-tree-id2 . -1) 5894 (5893 . 5894) (5845 . 5846) (#("'" 0 1 (fontified nil)) . -5845) (undo-tree-id3 . -1) 5846 (5845 . 5846) (5831 . 5832) (#("'" 0 1 (fontified nil)) . -5831) (undo-tree-id4 . -1) 5832 (5831 . 5832) (5818 . 5819) (#("'" 0 1 (face font-lock-comment-face fontified nil)) . -5818) (undo-tree-id5 . -1) 5819 (5818 . 5819) (5795 . 5796) (#("'" 0 1 (fontified t)) . -5795) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) 5796 (5795 . 5796)) nil (25333 9314 622550 629000) 0 nil])
([nil nil ((1340 . 1656) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1340) (1300 . 1339) (#("
" 0 1 (fontified nil)) . -1300) (1129 . 1301) (#(" " 0 1 (fontified nil)) . 1129) (856 . 1130) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 483 (fontified nil)) . -856) (t 25333 9314 639054 204000)) nil (25334 38961 659191 488000) 0 nil])
([nil nil ((1340 . 1656) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1340) (1300 . 1339) (#("
" 0 1 (fontified nil)) . -1300) (1129 . 1301) (#(" " 0 1 (fontified nil)) . 1129) (856 . 1130) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 483 (fontified nil)) . -856) (t 25334 38961 672415 372000)) nil (25334 39742 712752 628000) 0 nil])
([nil nil ((1340 . 1656) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1340) (1300 . 1339) (#("
" 0 1 (fontified nil)) . -1300) (1129 . 1301) (#(" " 0 1 (fontified nil)) . 1129) (856 . 1130) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 483 (fontified nil)) . -856) (t 25334 39742 725447 964000)) nil (25334 43915 300234 642000) 0 nil])
([nil nil ((1340 . 1656) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1340) (1300 . 1339) (#("
" 0 1 (fontified nil)) . -1300) (1129 . 1301) (#(" " 0 1 (fontified nil)) . 1129) (856 . 1130) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 483 (fontified nil)) . -856) (t 25334 43915 313510 895000)) nil (25335 45546 172963 973000) 0 nil])
([nil nil ((1340 . 1656) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1340) (1300 . 1339) (#("
" 0 1 (fontified nil)) . -1300) (1129 . 1301) (#(" " 0 1 (fontified nil)) . 1129) (856 . 1130) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 483 (fontified nil)) . -856) (t 25335 45546 182618 237000)) nil (25335 47374 716444 87000) 0 nil])
([nil nil ((1340 . 1656) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1340) (1300 . 1339) (#("
" 0 1 (fontified nil)) . -1300) (1129 . 1301) (#(" " 0 1 (fontified nil)) . 1129) (856 . 1130) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 483 (fontified nil)) . -856) (t 25335 47374 732837 148000)) nil (25335 47386 244857 553000) 0 nil])
([nil nil ((1340 . 1656) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1340) (1300 . 1339) (#("
" 0 1 (fontified nil)) . -1300) (1129 . 1301) (#(" " 0 1 (fontified nil)) . 1129) (856 . 1130) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 483 (fontified nil)) . -856) (t 25335 47386 256798 619000)) nil (25336 6299 854453 785000) 0 nil])
([nil nil ((1340 . 1656) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1340) (1300 . 1339) (#("
" 0 1 (fontified nil)) . -1300) (1129 . 1301) (#(" " 0 1 (fontified nil)) . 1129) (856 . 1130) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 483 (fontified nil)) . -856) (t 25336 6299 884900 986000)) nil (25337 6941 43278 443000) 0 nil])
([nil nil ((6074 . 6090) (6067 . 6074) (#("e" 0 1 (fontified t face font-lock-string-face)) . -6067) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (#("m" 0 1 (fontified t face font-lock-string-face)) . -6068) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -6069) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (#("c" 0 1 (fontified t face font-lock-string-face)) . -6070) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -6071) (undo-tree-id110 . -1) (undo-tree-id111 . -1) 6072 (6061 . 6072) (#("?" 0 1 (fontified t face font-lock-string-face)) . -6061) (undo-tree-id112 . -1) (undo-tree-id113 . -1) 6062 (6060 . 6062) (#("!" 0 1 (fontified t face font-lock-string-face)) . -6060) (undo-tree-id114 . -1) (undo-tree-id115 . -1) 6061 (6059 . 6061) (#("!" 0 1 (fontified t)) . -6059) (undo-tree-id116 . -1) (undo-tree-id117 . -1) 6060 (6059 . 6060) (#("~" 0 1 (fontified t)) . -6059) (undo-tree-id118 . -1) (undo-tree-id119 . -1) 6060 (6059 . 6060) (6052 . 6059) (6030 . 6052) (#("backup-dire" 0 11 (fontified t)) . -6030) (undo-tree-id120 . -11) (undo-tree-id121 . -11) 6041 (6034 . 6041) (6029 . 6034) (6024 . 6029) (6023 . 6024) (6020 . 6023) (#("l" 0 1 (fontified t)) . -6020) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (#(")" 0 1 (fontified t)) . -6021) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . 1) (undo-tree-id127 . -1) 6022 (6019 . 6022) (6018 . 6019) (6001 . 6018) (#("auto-save" 0 9 (fontified t)) . -6001) (undo-tree-id128 . -9) (undo-tree-id129 . -9) 6010 (5995 . 6010) (5994 . 5995) (5989 . 5994) (5972 . 5989) (#("make" 0 4 (fontified t)) . -5972) (undo-tree-id130 . -4) (undo-tree-id131 . -4) 5976 (5966 . 5976) (5965 . 5966) (t 25337 3504 535345 219000) 5965) nil (25337 7652 885691 443000) 0 nil] [nil nil ((6032 . 6052) (6001 . 6021) (5933 . 5953) (5899 . 5919) (5866 . 5886) (5823 . 5843) (#(" " 0 1 (fontified t)) . -5715) (5268 . 5273) ("    " . 5268) (5187 . 5192) ("    " . 5187) (5107 . 5112) ("    " . 5107) (5031 . 5036) ("    " . 5031) (4957 . 4962) ("    " . 4957) (4883 . 4888) ("    " . 4883) (4812 . 4817) ("    " . 4812) (4733 . 4738) ("    " . 4733) (4659 . 4664) ("    " . 4659) (4643 . 4647) ("  " . 4643) (2183 . 2203) (" " . -1807) (" " . -675) (519 . 520) (" " . 519) 5934 (t 25337 3504 535345 219000)) ((519 . 520) ("	" . 519) (675 . 676) (1807 . 1808) ("																				" . 2183) (4643 . 4645) ("				" . 4643) (4659 . 4663) ("					" . 4659) (4733 . 4737) ("					" . 4733) (4812 . 4816) ("					" . 4812) (4883 . 4887) ("					" . 4883) (4957 . 4961) ("					" . 4957) (5031 . 5035) ("					" . 5031) (5107 . 5111) ("					" . 5107) (5187 . 5191) ("					" . 5187) (5268 . 5272) ("					" . 5268) (5715 . 5716) (#("																				" 0 20 (fontified t)) . 5823) (#("																				" 0 20 (fontified t)) . 5866) (#("																				" 0 20 (fontified t)) . 5899) (#("																				" 0 20 (fontified t)) . 5933) (#("																				" 0 20 (fontified t)) . 6001) (#("																				" 0 20 (fontified t)) . 6032)) (25337 6941 42268 869000) 0 nil] [nil nil ((6032 . 6052) (6001 . 6021) (5933 . 5953) (5899 . 5919) (5866 . 5886) (5823 . 5843) (#(" " 0 1 (fontified t)) . -5715) (5268 . 5273) (#("    " 0 4 (fontified nil)) . 5268) (5187 . 5192) (#("    " 0 4 (fontified nil)) . 5187) (5107 . 5112) (#("    " 0 4 (fontified nil)) . 5107) (5031 . 5036) (#("    " 0 4 (fontified nil)) . 5031) (4957 . 4962) (#("    " 0 4 (fontified nil)) . 4957) (4883 . 4888) (#("    " 0 4 (fontified nil)) . 4883) (4812 . 4817) (#("    " 0 4 (fontified nil)) . 4812) (4733 . 4738) (#("    " 0 4 (fontified nil)) . 4733) (4659 . 4664) (#("    " 0 4 (fontified nil)) . 4659) (4643 . 4647) (#("  " 0 2 (fontified nil)) . 4643) (2183 . 2203) (#(" " 0 1 (fontified t)) . -1807) (#(" " 0 1 (fontified t)) . -675) (519 . 520) (#(" " 0 1 (fontified t)) . 519) 5934 (t 25337 3504 535345 219000)) ((519 . 520) ("	" . 519) (675 . 676) (1807 . 1808) ("																				" . 2183) (4643 . 4645) ("				" . 4643) (4659 . 4663) ("					" . 4659) (4733 . 4737) ("					" . 4733) (4812 . 4816) ("					" . 4812) (4883 . 4887) ("					" . 4883) (4957 . 4961) ("					" . 4957) (5031 . 5035) ("					" . 5031) (5107 . 5111) ("					" . 5107) (5187 . 5191) ("					" . 5187) (5268 . 5272) ("					" . 5268) (5715 . 5716) (#("																				" 0 20 (fontified t)) . 5823) (#("																				" 0 20 (fontified t)) . 5866) (#("																				" 0 20 (fontified t)) . 5899) (#("																				" 0 20 (fontified t)) . 5933) (#("																				" 0 20 (fontified t)) . 6001) (#("																				" 0 20 (fontified t)) . 6032)) (25337 6937 218893 95000) 0 nil])
([nil nil ((6153 . 6156) (6150 . 6153) (6148 . 6150) (6124 . 6148) (#("org-babel-load-lang" 0 19 (fontified t)) . -6124) (undo-tree-id90 . -19) (undo-tree-id91 . -19) 6143 (6142 . 6143) (#("u" 0 1 (fontified t)) . -6142) (undo-tree-id92 . -1) (undo-tree-id93 . -1) 6143 (6131 . 6143) (#("l" 0 1 (fontified t)) . -6131) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (#("e" 0 1 (fontified t)) . -6132) (undo-tree-id96 . -1) (undo-tree-id97 . -1) 6133 (6123 . 6133) (6121 . 6123) (6094 . 6121) (#("org-babel-do-loa" 0 16 (fontified t)) . -6094) (undo-tree-id98 . -16) (undo-tree-id99 . -16) 6110 (6105 . 6110) (6104 . 6105) (#("-" 0 1 (fontified t)) . -6104) (undo-tree-id100 . -1) (undo-tree-id101 . -1) 6105 (6093 . 6105) (6091 . 6093) (6090 . 6091) 6089) nil (25337 7652 885649 170000) 0 nil])
nil
nil
([nil nil ((6169 . 6172) (6166 . 6169) (6162 . 6166) (#("t" 0 1 (fontified t)) . -6162) (undo-tree-id89 . -1) 6163 (6153 . 6163)) nil (25337 7652 885456 16000) 0 nil])
([nil nil ((6172 . 6173)) nil (25337 7652 885453 100000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . 6169) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . 1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1)) nil (25337 7652 885450 865000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 6169) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . 1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1)) nil (25337 7652 885413 119000) 0 nil])
([nil nil ((6174 . 6175) 6152) nil (25337 7652 885312 137000) 0 nil])
([nil nil ((6163 . 6166) (#("." 0 1 (fontified t)) . -6163) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) 6164 (6163 . 6164) (#(" " 0 1 (fontified t)) . -6163) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (#("." 0 1 (fontified t)) . -6164) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) 6165 (6164 . 6165) (t 25337 7652 901708 704000)) nil (25337 7885 326551 687000) 0 nil])
([nil nil ((1340 . 1656) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1340) (1300 . 1339) (#("
" 0 1 (fontified nil)) . -1300) (1129 . 1301) (#(" " 0 1 (fontified nil)) . 1129) (856 . 1130) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 483 (fontified nil)) . -856) (t 25337 7885 343010 515000)) nil (25337 8021 549234 473000) 0 nil])
([nil nil ((6174 . 6183) (#("h" 0 1 (fontified t)) . -6174) (undo-tree-id25 . -1) 6175 (6171 . 6175) (6168 . 6171) (t 25337 7909 495563 243000)) nil (25337 8225 496212 828000) 0 nil] [nil nil ((#("	 " 0 2 (fontified nil)) . 6168) (#("
" 0 1 (fontified t)) . -6168) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) 6149 (t 25337 7909 495563 243000)) ((6168 . 6169) (6168 . 6170)) (25337 8021 548925 979000) 0 nil])
([nil nil ((#("org-babel-do-load-languages" 0 27 (fontified t)) . 6094) (undo-tree-id24 . -7)) nil (25337 8225 496210 50000) 0 nil])
nil
([nil nil ((6094 . 6121) (#("org-babel-do-" 0 13 (fontified t)) . -6094) (undo-tree-id22 . -13) 6107 (6094 . 6107) (#("org-babel-do" 0 12 (fontified t)) . -6094) (undo-tree-id23 . -12) 6106 (6094 . 6106)) nil (25337 8225 496207 375000) 0 nil])
([nil nil ((#("	 " 0 2 (fontified nil)) . 6183) (#("
" 0 1 (fontified t)) . -6183) (undo-tree-id21 . -1) 6171) nil (25337 8225 496199 372000) 0 nil])
([nil nil ((1340 . 1656) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1340) (1300 . 1339) (#("
" 0 1 (fontified nil)) . -1300) (1129 . 1301) (#(" " 0 1 (fontified nil)) . 1129) (856 . 1130) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 483 (fontified nil)) . -856) (t 25337 8225 506817 108000)) nil (25337 14598 406449 184000) 0 nil])
([nil nil ((1340 . 1656) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1340) (1300 . 1339) (#("
" 0 1 (fontified nil)) . -1300) (1129 . 1301) (#(" " 0 1 (fontified nil)) . 1129) (856 . 1130) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 483 (fontified nil)) . -856) (t 25337 14598 418546 107000)) nil (25337 14764 638066 509000) 0 nil])
([nil nil ((1743 . 1747) (t 25337 14673 416794 623000)) nil (25337 14825 114827 971000) 0 nil] [nil nil ((66 . 67) (#("   " 0 3 (fontified nil)) . 66) (undo-tree-id0 . -3) (undo-tree-id1 . -3) (#("
" 0 1 (fontified t)) . -69) (undo-tree-id2 . -1) 48 (t 25337 14673 416794 623000)) ((66 . 70) (#(" " 0 1 (fontified t)) . 66)) (25337 14764 637557 146000) 0 nil])
([nil nil ((#("(use
" 0 5 (fontified t)) . 1743) (undo-tree-id3 . -5) (undo-tree-id4 . -3) (undo-tree-id5 . 1) 1746) nil (25337 14825 114821 510000) 0 nil])
nil
([nil nil ((1340 . 1656) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1340) (1300 . 1339) (#("
" 0 1 (fontified nil)) . -1300) (1129 . 1301) (#(" " 0 1 (fontified nil)) . 1129) (856 . 1130) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 483 (fontified nil)) . -856) (t 25337 14825 125342 997000)) nil (25337 14875 786405 622000) 0 nil])
([nil nil ((1340 . 1656) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1340) (1300 . 1339) (#("
" 0 1 (fontified nil)) . -1300) (1129 . 1301) (#(" " 0 1 (fontified nil)) . 1129) (856 . 1130) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 483 (fontified nil)) . -856) (t 25337 14875 802862 366000)) nil (25337 15451 57077 890000) 0 nil])
([nil nil ((1340 . 1656) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1340) (1300 . 1339) (#("
" 0 1 (fontified nil)) . -1300) (1129 . 1301) (#(" " 0 1 (fontified nil)) . 1129) (856 . 1130) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 483 (fontified nil)) . -856) (t 25337 15451 72109 362000)) nil (25337 16106 278211 340000) 0 nil])
([nil nil ((6217 . 6218) (#(")" 0 1 (fontified t)) . -6217) (undo-tree-id5 . -1) (undo-tree-id6 . 1) (undo-tree-id7 . -1) 6218 (6217 . 6218) (6215 . 6217) (6209 . 6215) (#("u" 0 1 (face font-lock-builtin-face fontified t)) . -6209) (undo-tree-id8 . -1) 6210 (6206 . 6210) (6204 . 6206) (#(")" 0 1 (fontified t)) . -6204) (undo-tree-id9 . -1) (undo-tree-id10 . 1) (undo-tree-id11 . -1) 6205 (6200 . 6205) (6189 . 6200) (#("use-pac" 0 7 (fontified t)) . -6189) (undo-tree-id12 . -7) 6196 (6188 . 6196) (6187 . 6188) (t 25337 16106 291245 351000) 6185) nil (25337 16546 653780 886000) 0 nil])
([nil nil ((#(":ensure t" 0 7 (face font-lock-builtin-face fontified t) 7 9 (fontified t)) . 6206)) nil (25337 16546 653765 751000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 6205) (undo-tree-id4 . -2)) nil (25337 16546 653764 708000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . 6204) (#("
" 0 1 (fontified t)) . -6204) (undo-tree-id3 . -1) 6188) nil (25337 16546 653762 688000) 0 nil])
([nil nil ((#("(use-package org)
" 0 1 (fontified t) 1 12 (face font-lock-keyword-face fontified t) 12 13 (fontified t) 13 16 (face font-lock-constant-face fontified t) 16 17 (fontified t) 17 18 (fontified t)) . 6188) (undo-tree-id0 . -12) (undo-tree-id1 . -18) (undo-tree-id2 . 1) 6200) nil (25337 16546 653760 208000) 0 nil])
([nil nil ((579 . 580) 550) nil (25337 16546 653735 37000) 0 nil])
([nil nil ((580 . 601)) nil (25337 16546 653733 807000) 0 nil])
([nil nil ((601 . 602)) nil (25337 16546 653732 719000) 0 nil])
([nil nil ((1367 . 1683) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 19 (fontified t) 19 22 (face font-lock-comment-delimiter-face fontified t) 22 60 (face font-lock-comment-face fontified t) 60 61 (fontified t) 61 64 (face font-lock-comment-delimiter-face fontified t) 64 125 (face font-lock-comment-face fontified t) 125 126 (fontified t) 126 129 (face font-lock-comment-delimiter-face fontified t) 129 161 (face font-lock-comment-face fontified t) 161 183 (face font-lock-comment-face fontified t) 183 184 (fontified t) 184 187 (face font-lock-comment-delimiter-face fontified t) 187 237 (face font-lock-comment-face fontified t) 237 238 (fontified t) 238 266 (fontified t) 266 274 (face font-lock-builtin-face fontified t) 274 300 (fontified t) 300 307 (face font-lock-builtin-face fontified t) 307 316 (fontified t)) . -1367) (1327 . 1366) (#("
" 0 1 (fontified nil)) . -1327) (1152 . 1328) (#(" " 0 1 (fontified nil)) . 1152) (879 . 1153) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 23 (fontified t) 23 26 (face font-lock-comment-delimiter-face fontified t) 26 68 (face font-lock-comment-face fontified t) 68 69 (fontified t) 69 72 (face font-lock-comment-delimiter-face fontified t) 72 133 (face font-lock-comment-face fontified t) 133 134 (fontified t) 134 137 (face font-lock-comment-delimiter-face fontified t) 137 191 (face font-lock-comment-face fontified t) 191 192 (fontified t) 192 195 (face font-lock-comment-delimiter-face fontified t) 195 245 (face font-lock-comment-face fontified t) 245 483 (fontified t)) . -879) 602) nil (25337 16546 653726 169000) 0 nil])
([nil nil ((1376 . 1692) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 19 (fontified t) 19 22 (face font-lock-comment-delimiter-face fontified t) 22 60 (face font-lock-comment-face fontified t) 60 61 (fontified t) 61 64 (face font-lock-comment-delimiter-face fontified t) 64 125 (face font-lock-comment-face fontified t) 125 126 (fontified t) 126 129 (face font-lock-comment-delimiter-face fontified t) 129 183 (face font-lock-comment-face fontified t) 183 184 (fontified t) 184 187 (face font-lock-comment-delimiter-face fontified t) 187 237 (face font-lock-comment-face fontified t) 237 240 (fontified t) 240 260 (fontified t) 260 261 (fontified t) 261 266 (fontified t) 266 274 (face font-lock-builtin-face fontified t) 274 300 (fontified t) 300 307 (face font-lock-builtin-face fontified t) 307 314 (fontified t) 314 315 (fontified t) 315 316 (fontified t)) . -1376) (1336 . 1375) (#("
" 0 1 (fontified nil)) . -1336) (1152 . 1337) (#(" " 0 1 (fontified nil)) . 1152) (879 . 1153) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 23 (fontified t) 23 26 (face font-lock-comment-delimiter-face fontified t) 26 68 (face font-lock-comment-face fontified t) 68 69 (fontified t) 69 72 (face font-lock-comment-delimiter-face fontified t) 72 133 (face font-lock-comment-face fontified t) 133 134 (fontified t) 134 137 (face font-lock-comment-delimiter-face fontified t) 137 191 (face font-lock-comment-face fontified t) 191 192 (fontified t) 192 195 (face font-lock-comment-delimiter-face fontified t) 195 245 (face font-lock-comment-face fontified t) 245 248 (fontified t) 248 276 (fontified t) 276 448 (fontified t) 448 449 (fontified t) 449 450 (fontified t) 450 453 (fontified t) 453 475 (fontified t) 475 476 (fontified t) 476 485 (fontified t) 485 486 (fontified t) 486 487 (fontified t)) . -879)) nil (25337 16617 397585 345000) 0 nil])
([nil nil ((#("(package-install 'org)
" 0 22 (fontified t) 22 23 (fontified t)) . 580) (undo-tree-id88 . -23) (undo-tree-id89 . 1) (undo-tree-id90 . -22) (undo-tree-id91 . -21) (undo-tree-id92 . -22) (undo-tree-id93 . -22) (undo-tree-id94 . -22) (undo-tree-id95 . -22) (undo-tree-id96 . -22) (undo-tree-id97 . 2) (undo-tree-id98 . -22) (undo-tree-id99 . 23) (undo-tree-id100 . -1) (undo-tree-id101 . -22) (undo-tree-id102 . -22) (undo-tree-id103 . -22) (undo-tree-id104 . -22) (undo-tree-id105 . -22) (undo-tree-id106 . -22) (undo-tree-id107 . -22) (undo-tree-id108 . -22) (undo-tree-id109 . -22) (undo-tree-id110 . -22) (undo-tree-id111 . -22) (undo-tree-id112 . -22) (undo-tree-id113 . -22) (undo-tree-id114 . -22) (undo-tree-id115 . -22) (undo-tree-id116 . -22) (undo-tree-id117 . -22) (undo-tree-id118 . -22) (undo-tree-id119 . -22) (undo-tree-id120 . -22) (undo-tree-id121 . -21) (undo-tree-id122 . -21) (undo-tree-id123 . -21) (undo-tree-id124 . -21) (undo-tree-id125 . -21) (undo-tree-id126 . -21) (undo-tree-id127 . -21) (undo-tree-id128 . -21) (undo-tree-id129 . -21) (undo-tree-id130 . -21) (undo-tree-id131 . -21) (undo-tree-id132 . -21) (undo-tree-id133 . -21) (undo-tree-id134 . -21) (undo-tree-id135 . -21) (undo-tree-id136 . -21) (undo-tree-id137 . -21) (undo-tree-id138 . -21) (undo-tree-id139 . -21) (undo-tree-id140 . -21) (undo-tree-id141 . -21) (undo-tree-id142 . -21) (undo-tree-id143 . -21) (undo-tree-id144 . -21) (undo-tree-id145 . -21) (undo-tree-id146 . -21) 601 (t . 0)) nil (25337 16635 772886 633000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 1134)) nil (25337 16635 772710 365000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . 1134)) nil (25337 16635 772709 618000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . 1134) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1)) nil (25337 16635 772707 392000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . 1134) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1)) nil (25337 16635 772653 551000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . 1134)) nil (25337 16635 772480 791000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . 1134)) nil (25337 16635 772479 841000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . 1134)) nil (25337 16635 772478 895000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 1134)) nil (25337 16635 772477 718000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1134)) nil (25337 16635 772471 956000) 0 nil])
([nil nil ((#("(emacs-lisp . t)" 0 16 (fontified t)) . 6155) (undo-tree-id148 . -15) (undo-tree-id149 . -15) (undo-tree-id150 . -15) (undo-tree-id151 . -15) (undo-tree-id152 . -15) (undo-tree-id153 . -15) (undo-tree-id154 . -15) (undo-tree-id155 . -15) (undo-tree-id156 . -15) (undo-tree-id157 . -15) (undo-tree-id158 . -15) (undo-tree-id159 . -15) (undo-tree-id160 . -15) (undo-tree-id161 . -15) (undo-tree-id162 . -15) (undo-tree-id163 . -15) (undo-tree-id164 . -15) (undo-tree-id165 . -15) (undo-tree-id166 . -15) (undo-tree-id167 . -15) (undo-tree-id168 . -15) (undo-tree-id169 . -15) (undo-tree-id170 . -15) (undo-tree-id171 . -15) (undo-tree-id172 . -15) (undo-tree-id173 . -15) (undo-tree-id174 . -15) (undo-tree-id175 . -15) (undo-tree-id176 . -15) (undo-tree-id177 . -15) (undo-tree-id178 . -15) (undo-tree-id179 . -15) (undo-tree-id180 . -15) (undo-tree-id181 . -15) (undo-tree-id182 . -15) (undo-tree-id183 . -15) (undo-tree-id184 . -15) (undo-tree-id185 . -15) (undo-tree-id186 . -15) (undo-tree-id187 . -15) (undo-tree-id188 . -15) (undo-tree-id189 . -15) (undo-tree-id190 . -15) (undo-tree-id191 . -15) (undo-tree-id192 . -15) (undo-tree-id193 . -15) (undo-tree-id194 . -15) (undo-tree-id195 . -15) (undo-tree-id196 . -15) (undo-tree-id197 . -15) (undo-tree-id198 . -15) (undo-tree-id199 . -15) (undo-tree-id200 . -15) (undo-tree-id201 . -15) (undo-tree-id202 . -15) (undo-tree-id203 . -15) (undo-tree-id204 . -15) (undo-tree-id205 . -15) (undo-tree-id206 . -15) (undo-tree-id207 . -15) (undo-tree-id208 . -15) (undo-tree-id209 . -15) (undo-tree-id210 . -15) (undo-tree-id211 . -15) (undo-tree-id212 . -15) (undo-tree-id213 . -15) (undo-tree-id214 . -15) (undo-tree-id215 . -15) (undo-tree-id216 . -15) (undo-tree-id217 . -15) (undo-tree-id218 . -15) (undo-tree-id219 . -15) (undo-tree-id220 . -15) (undo-tree-id221 . -15) (undo-tree-id222 . -15) (undo-tree-id223 . -15) (undo-tree-id224 . -15) (undo-tree-id225 . -15) (undo-tree-id226 . -15) (undo-tree-id227 . -15) (undo-tree-id228 . -15) (undo-tree-id229 . -15) (undo-tree-id230 . -15) (undo-tree-id231 . -15) (undo-tree-id232 . -15) (undo-tree-id233 . -15) (undo-tree-id234 . -15) (undo-tree-id235 . -15) (undo-tree-id236 . -15) (undo-tree-id237 . -15) (undo-tree-id238 . -15) (undo-tree-id239 . -15) (undo-tree-id240 . -15) (undo-tree-id241 . -15) (undo-tree-id242 . -15) (undo-tree-id243 . -15) (undo-tree-id244 . -15) (undo-tree-id245 . -15) (undo-tree-id246 . -15) (undo-tree-id247 . -15) (undo-tree-id248 . -3) (undo-tree-id249 . -3) (undo-tree-id250 . -3) (undo-tree-id251 . -3) (undo-tree-id252 . -3) (undo-tree-id253 . -3) (undo-tree-id254 . -3) (undo-tree-id255 . -3) (undo-tree-id256 . -3) (undo-tree-id257 . -3) (undo-tree-id258 . -3) (undo-tree-id259 . -3) (undo-tree-id260 . -3) (undo-tree-id261 . -3) (undo-tree-id262 . -3) (undo-tree-id263 . -2) (undo-tree-id264 . -2) (undo-tree-id265 . -2) (undo-tree-id266 . -2) (undo-tree-id267 . -2) (undo-tree-id268 . -2) (undo-tree-id269 . -2) (undo-tree-id270 . -2) (undo-tree-id271 . -2) (undo-tree-id272 . -2) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . 16) (undo-tree-id279 . -1) (undo-tree-id280 . 1) (undo-tree-id281 . -16) (t 25337 16635 788337 936000)) nil (25337 16749 227465 414000) 0 nil])
([nil nil ((#("	 " 0 2 (fontified nil)) . 6155) (#("
" 0 1 (fontified t)) . -6155) (undo-tree-id147 . -1) 6154) nil (25337 16749 227324 950000) 0 nil])
([nil nil ((1344 . 1660) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1344) (1304 . 1343) (#("
" 0 1 (fontified nil)) . -1304) (1129 . 1305) (#(" " 0 1 (fontified nil)) . 1129) (856 . 1130) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 487 (fontified nil)) . -856) (t 25337 16749 239063 198000)) nil (25337 17750 566979 468000) 0 nil])
([nil nil ((#(";; Initialize package sources
(require 'package)

(setq package-archives '((\"melpa\" . \"https://melpa.org/packages/\")
                         (\"org\" . \"https://orgmode.org/elpa/\")
                         (\"elpa\" . \"https://elpa.gnu.org/packages/\")))

(package-initialize)
(unless package-archive-contents
 (package-refresh-contents))

(package-install 'use-package)

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
   (package-install 'use-package))

(require 'use-package)
;;(setq use-package-always-ensure t)
" 0 3 (face font-lock-comment-delimiter-face fontified t) 3 30 (face font-lock-comment-face fontified t) 30 31 (fontified t) 31 38 (face font-lock-keyword-face fontified t) 38 40 (fontified t) 40 47 (face font-lock-constant-face fontified t) 47 51 (fontified t) 51 55 (face font-lock-keyword-face fontified t) 55 76 (fontified t) 76 83 (face font-lock-string-face fontified t) 83 86 (fontified t) 86 115 (face font-lock-string-face fontified t) 115 143 (fontified t) 143 148 (face font-lock-string-face fontified t) 148 151 (fontified t) 151 178 (face font-lock-string-face fontified t) 178 206 (fontified t) 206 212 (face font-lock-string-face fontified t) 212 215 (fontified t) 215 247 (face font-lock-string-face fontified t) 247 274 (fontified t) 274 280 (face font-lock-keyword-face fontified t) 280 368 (fontified t) 368 371 (face font-lock-comment-delimiter-face fontified t) 371 417 (face font-lock-comment-face fontified t) 417 418 (fontified t) 418 424 (face font-lock-keyword-face fontified t) 424 497 (fontified t) 497 504 (face font-lock-keyword-face fontified t) 504 506 (fontified t) 506 517 (face font-lock-constant-face fontified t) 517 519 (fontified t) 519 521 (face font-lock-comment-delimiter-face fontified t) 521 556 (face font-lock-comment-face fontified t)) . 213) (undo-tree-id0 . -519) (undo-tree-id1 . -519) (undo-tree-id2 . -556) (undo-tree-id3 . -519) (undo-tree-id4 . -519) (undo-tree-id5 . -519) 732 (t 25337 17750 579971 370000)) nil (25337 17860 757211 736000) 0 nil])
([nil nil ((1 . 557)) nil (25337 17860 757179 440000) 0 nil])
([nil nil ((#(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 520)) nil (25337 17860 757178 262000) 0 nil])
([nil nil ((#(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 520)) nil (25337 17860 757176 252000) 0 nil])
([nil nil ((554 . 555) 520) nil (25337 17860 757171 269000) 0 nil])
([nil nil ((#(";; this line is generated by the package manager if you delete it it will generate it
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))
" 0 3 (face font-lock-comment-delimiter-face fontified t) 3 86 (face font-lock-comment-face fontified t) 86 109 (fontified t) 109 112 (face font-lock-comment-delimiter-face fontified t) 112 154 (face font-lock-comment-face fontified t) 154 155 (fontified t) 155 158 (face font-lock-comment-delimiter-face fontified t) 158 219 (face font-lock-comment-face fontified t) 219 220 (fontified t) 220 223 (face font-lock-comment-delimiter-face fontified t) 223 277 (face font-lock-comment-face fontified t) 277 278 (fontified t) 278 281 (face font-lock-comment-delimiter-face fontified t) 281 331 (face font-lock-comment-face fontified t) 331 593 (fontified t) 593 596 (face font-lock-comment-delimiter-face fontified t) 596 634 (face font-lock-comment-face fontified t) 634 635 (fontified t) 635 638 (face font-lock-comment-delimiter-face fontified t) 638 699 (face font-lock-comment-face fontified t) 699 700 (fontified t) 700 703 (face font-lock-comment-delimiter-face fontified t) 703 731 (face font-lock-comment-face fontified t) 731 757 (face font-lock-comment-face fontified t) 757 758 (fontified t) 758 761 (face font-lock-comment-delimiter-face fontified t) 761 811 (face font-lock-comment-face fontified t) 811 840 (fontified t) 840 848 (face font-lock-builtin-face fontified t) 848 874 (fontified t) 874 881 (face font-lock-builtin-face fontified t) 881 891 (fontified t)) . 769) (undo-tree-id27 . -811) (undo-tree-id28 . -891) (undo-tree-id29 . -811) (undo-tree-id30 . -811) (undo-tree-id31 . -811) (undo-tree-id32 . -811) 1580 (t 25337 17860 769581 785000)) nil (25337 17882 632701 479000) 0 nil])
([nil nil ((nil rear-nonsticky nil 555 . 556) (#("
" 0 1 (fontified nil)) . -1446) (555 . 1447)) nil (25337 17882 632693 871000) 0 nil])
([nil nil ((1446 . 1447) 1367) nil (25337 17882 632692 408000) 0 nil])
([nil nil ((#("

" 0 2 (fontified t)) . 1658) (undo-tree-id15 . -1) (undo-tree-id16 . -2) (undo-tree-id17 . -2) (undo-tree-id18 . -2) (undo-tree-id19 . -2) (undo-tree-id20 . -2) (undo-tree-id21 . -2) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1)) nil (25337 17882 632690 351000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1658) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1)) nil (25337 17882 632672 57000) 0 nil])
([nil nil ((1512 . 1515) (#(")" 0 1 (face font-lock-string-face fontified t)) . -1512) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . 1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) 1513 (1509 . 1513) (#("r" 0 1 (face font-lock-string-face fontified t)) . -1509) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -1510) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (#("g" 0 1 (face font-lock-string-face fontified t)) . -1511) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) 1512 (1509 . 1512) (#("f" 0 1 (face font-lock-string-face fontified t)) . -1509) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -1510) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) 1511 (1508 . 1511) (#("." 0 1 (face font-lock-string-face fontified t)) . -1508) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) 1509 (1490 . 1509) (1488 . 1490) (#("c" 0 1 (face font-lock-string-face fontified t)) . -1488) (undo-tree-id219 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -1489) (undo-tree-id220 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -1490) (undo-tree-id221 . -1) (#("f" 0 1 (face font-lock-string-face fontified t)) . -1491) (undo-tree-id222 . -1) 1492 (1491 . 1492) (#("g" 0 1 (face font-lock-string-face fontified t)) . -1491) (undo-tree-id223 . -1) 1492 (1488 . 1492) (#("m" 0 1 (face font-lock-string-face fontified t)) . -1488) (undo-tree-id224 . -1) (#("y" 0 1 (face font-lock-string-face fontified t)) . -1489) (undo-tree-id225 . -1) 1490 (1486 . 1490) (1470 . 1486) (#("expand-file" 0 11 (fontified t)) . -1470) (undo-tree-id226 . -11) 1481 (1476 . 1481) (1468 . 1476) (1449 . 1468) (#("org-babel-load-" 0 15 (fontified t)) . -1449) (undo-tree-id227 . -15) 1464 (1449 . 1464) (#("org-babel-load" 0 14 (fontified t)) . -1449) (undo-tree-id228 . -14) 1463 (1456 . 1463) (#("l" 0 1 (fontified t)) . -1456) (undo-tree-id229 . -1) (#("e" 0 1 (fontified t)) . -1457) (undo-tree-id230 . -1) 1458 (1448 . 1458) (1447 . 1448) (t 25337 17882 651562 849000) 1447) nil (25337 17947 465151 405000) 0 nil])
([nil nil ((#(";; you have an ugly face
(scroll-bar-mode -1) 
(tool-bar-mode -1)   
(tooltip-mode -1)    
(set-fringe-mode 10)
(menu-bar-mode -1)   

;; shut the fuck up
(setq visible-bell t)
(setq inhibit-startup-message t)

;; make escape quite prompts
(global-set-key (kbd \"<escape>\") 'keyboard-escape-quit)
(use-package which-key
  :ensure t
  :config (which-key-mode))

 
;; vim key bindings 
(use-package evil
  :ensure t
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd \"TAB\") 'tab-to-tab-stop)
  :custom
  (evil-undo-system 'undo-tree))

;; relative number line
(global-display-line-numbers-mode t)
(setq display-line-numbers 'relative)
(setq display-line-numbers-type 'relative)

;; cursor hightlight
(global-hl-line-mode t)
;(set-face-background 'hl-line \"#DEDEDE\")


(setq scroll-margin 8
      scroll-conservatively 101
      scroll-preserve-screen-position t 
      auto-window-vscroll nil)

(use-package counsel
  :ensure t)

(use-package ivy
  :ensure t)

(use-package swiper
  :ensure t
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  ;; enable this if you want `swiper' to use it
  ;; (setq search-default-mode #'char-fold-to-regexp)
  (global-set-key \"\\C-s\" 'swiper)
  (global-set-key (kbd \"C-c C-r\") 'ivy-resume)
  (global-set-key (kbd \"<f6>\") 'ivy-resume)
  (global-set-key (kbd \"M-x\") 'counsel-M-x)
  (global-set-key (kbd \"C-x C-f\") 'counsel-find-file)
  (global-set-key (kbd \"<f1> f\") 'counsel-describe-function)
  (global-set-key (kbd \"<f1> v\") 'counsel-describe-variable)
  (global-set-key (kbd \"<f1> o\") 'counsel-describe-symbol)
  (global-set-key (kbd \"<f1> l\") 'counsel-find-library)
  (global-set-key (kbd \"<f2> i\") 'counsel-info-lookup-symbol)
  (global-set-key (kbd \"<f2> u\") 'counsel-unicode-char)
  (global-set-key (kbd \"C-c g\") 'counsel-git)
  (global-set-key (kbd \"C-c j\") 'counsel-git-grep)
  (global-set-key (kbd \"C-c k\") 'counsel-ag)
  (global-set-key (kbd \"C-x l\") 'counsel-locate)
  (global-set-key (kbd \"C-S-o\") 'counsel-rhythmbox)
  (define-key minibuffer-local-map (kbd \"C-r\") 'counsel-minibuffer-history)
  )

(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic nil) ; if nil, italics is universally disabled
  (load-theme 'doom-dracula t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme \"doom-colors\") ; use \"doom-colors\" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))


(set-face-attribute 'default nil :height 135)

(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))
(use-package all-the-icons
  :ensure t)

(use-package avy
  :ensure t
  :bind (\"M-s\" . avy-goto-line))

(use-package neotree
  :ensure t
  :bind (\"M-m\" . neotree-toggle))

(setq neo-theme (if(display-graphic-p) 'icons 'arrow))
(add-hook 'neotree-mode-hook
	  (lambda ()
	    (define-key evil-normal-state-local-map (kbd \"TAB\") 'neotree-enter)
	    (define-key evil-normal-state-local-map (kbd \"SPC\") 'neotree-quick-look)
	    (define-key evil-normal-state-local-map (kbd \"q\") 'neotree-hide)
	    (define-key evil-normal-state-local-map (kbd \"RET\") 'neotree-enter)
	    (define-key evil-normal-state-local-map (kbd \"g\") 'neotree-refresh)
	    (define-key evil-normal-state-local-map (kbd \"n\") 'neotree-next-line)
	    (define-key evil-normal-state-local-map (kbd \"p\") 'neotree-previous-line)
	    (define-key evil-normal-state-local-map (kbd \"A\") 'neotree-stretch-toggle)
	    (define-key evil-normal-state-local-map (kbd \"H\") 'neotree-hidden-file-toggle)))
(setq neo-smart-open t)

(use-package undo-tree
  :ensure t
  :config
  (global-undo-tree-mode))

(use-package company
  :ensure t
  :config
  (company-mode)
  (add-hook 'after-init-hook 'global-company-mode) )

(use-package tree-sitter
  :ensure t
  :config
  (global-tree-sitter-mode))

(use-package tree-sitter-langs
  :ensure t)

(setq-default tab-width 2)
 
(use-package org-bullets
	:ensure t
	:config
	(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

;(use-package evil-org
;  :ensure t
;  :after org
;  :hook (org-mode . (lambda () evil-org-mode))
;  :config
;  (require 'evil-org-agenda)
;  (evil-org-agenda-set-keys))

(setq make-backup-files nil)
(setq auto-save-default nil)
(setq backup-directory-alist '((\"\".\"~/main/.emacs/emacs-backup\")))


(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)))
		
" 0 3 (face font-lock-comment-delimiter-face fontified t) 3 25 (face font-lock-comment-face fontified t) 25 135 (fontified t) 135 138 (face font-lock-comment-delimiter-face fontified t) 138 155 (face font-lock-comment-face fontified t) 155 156 (fontified t) 156 160 (face font-lock-keyword-face fontified t) 160 178 (fontified t) 178 182 (face font-lock-keyword-face fontified t) 182 210 (fontified t) 210 211 (fontified t) 211 214 (face font-lock-comment-delimiter-face fontified t) 214 240 (face font-lock-comment-face fontified t) 240 261 (fontified t) 261 262 (face font-lock-string-face fontified t) 262 270 (face font-lock-string-face fontified t) 270 271 (face font-lock-string-face fontified t) 271 297 (fontified t) 297 308 (face font-lock-keyword-face fontified t) 308 309 (fontified t) 309 318 (face font-lock-constant-face fontified t) 318 321 (fontified t) 321 328 (face font-lock-builtin-face fontified t) 328 333 (fontified t) 333 340 (face font-lock-builtin-face fontified t) 340 362 (fontified t) 362 365 (face font-lock-comment-delimiter-face fontified t) 365 383 (face font-lock-comment-face fontified t) 383 384 (fontified t) 384 395 (face font-lock-keyword-face fontified t) 395 396 (fontified t) 396 400 (face font-lock-constant-face fontified t) 400 403 (fontified t) 403 410 (face font-lock-builtin-face fontified t) 410 415 (fontified t) 415 422 (face font-lock-builtin-face fontified t) 422 480 (fontified t) 480 481 (face font-lock-string-face fontified t) 481 484 (face font-lock-string-face fontified t) 484 485 (face font-lock-string-face fontified t) 485 507 (fontified t) 507 514 (face font-lock-builtin-face fontified t) 514 549 (fontified t) 549 552 (face font-lock-comment-delimiter-face fontified t) 552 573 (face font-lock-comment-face fontified t) 573 606 (fontified t) 606 610 (fontified t) 610 611 (fontified t) 611 615 (face font-lock-keyword-face fontified t) 615 631 (fontified t) 631 648 (fontified t) 648 649 (fontified t) 649 653 (face font-lock-keyword-face fontified t) 653 692 (fontified t) 692 695 (face font-lock-comment-delimiter-face fontified t) 695 713 (face font-lock-comment-face fontified t) 713 737 (fontified t) 737 738 (face font-lock-comment-delimiter-face fontified t) 738 769 (face font-lock-comment-face fontified t) 769 776 (face font-lock-comment-face fontified t) 776 779 (face font-lock-comment-face fontified t) 779 782 (fontified t) 782 786 (face font-lock-keyword-face fontified t) 786 818 (fontified t) 818 819 (fontified t) 819 835 (fontified t) 835 909 (fontified t) 909 920 (face font-lock-keyword-face fontified t) 920 921 (fontified t) 921 928 (face font-lock-constant-face fontified t) 928 931 (fontified t) 931 938 (face font-lock-builtin-face fontified t) 938 944 (fontified t) 944 955 (face font-lock-keyword-face fontified t) 955 956 (fontified t) 956 959 (face font-lock-constant-face fontified t) 959 962 (fontified t) 962 969 (face font-lock-builtin-face fontified t) 969 975 (fontified t) 975 986 (face font-lock-keyword-face fontified t) 986 987 (fontified t) 987 993 (face font-lock-constant-face fontified t) 993 996 (fontified t) 996 1003 (face font-lock-builtin-face fontified t) 1003 1008 (fontified t) 1008 1015 (face font-lock-builtin-face fontified t) 1015 1034 (fontified t) 1034 1038 (face font-lock-keyword-face fontified t) 1038 1069 (fontified t) 1069 1073 (face font-lock-keyword-face fontified t) 1073 1108 (fontified t) 1108 1111 (face font-lock-comment-delimiter-face fontified t) 1111 1136 (face font-lock-comment-face fontified t) 1136 1142 (face (font-lock-constant-face font-lock-comment-face) fontified t) 1142 1154 (face font-lock-comment-face fontified t) 1154 1156 (fontified t) 1156 1159 (face font-lock-comment-delimiter-face fontified t) 1159 1208 (face font-lock-comment-face fontified t) 1208 1226 (fontified t) 1226 1227 (face font-lock-string-face fontified t) 1227 1231 (face font-lock-string-face fontified t) 1231 1232 (face font-lock-string-face fontified t) 1232 1265 (fontified t) 1265 1266 (face font-lock-string-face fontified t) 1266 1273 (face font-lock-string-face fontified t) 1273 1274 (face font-lock-string-face fontified t) 1274 1307 (fontified t) 1307 1312 (fontified t) 1312 1313 (face font-lock-string-face fontified t) 1313 1317 (face font-lock-string-face fontified t) 1317 1318 (face font-lock-string-face fontified t) 1318 1333 (fontified t) 1333 1356 (fontified t) 1356 1357 (face font-lock-string-face fontified t) 1357 1360 (face font-lock-string-face fontified t) 1360 1361 (face font-lock-string-face fontified t) 1361 1400 (fontified t) 1400 1401 (face font-lock-string-face fontified t) 1401 1408 (face font-lock-string-face fontified t) 1408 1409 (face font-lock-string-face fontified t) 1409 1454 (fontified t) 1454 1455 (face font-lock-string-face fontified t) 1455 1461 (face font-lock-string-face fontified t) 1461 1462 (face font-lock-string-face fontified t) 1462 1497 (fontified t) 1497 1498 (fontified t) 1498 1500 (fontified t) 1500 1515 (fontified t) 1515 1516 (fontified t face font-lock-string-face) 1516 1522 (fontified t face font-lock-string-face) 1522 1523 (fontified t face font-lock-string-face) 1523 1553 (fontified t) 1553 1576 (fontified t) 1576 1584 (face font-lock-string-face fontified t) 1584 1635 (fontified t) 1635 1643 (face font-lock-string-face fontified t) 1643 1691 (fontified t) 1691 1699 (face font-lock-string-face fontified t) 1699 1709 (fontified t) 1709 1710 (fontified t) 1710 1711 (fontified t) 1711 1730 (fontified t) 1730 1753 (fontified t) 1753 1761 (face font-lock-string-face fontified t) 1761 1809 (fontified t) 1809 1816 (face font-lock-string-face fontified t) 1816 1855 (fontified t) 1855 1862 (face font-lock-string-face fontified t) 1862 1906 (fontified t) 1906 1913 (face font-lock-string-face fontified t) 1913 1951 (fontified t) 1951 1958 (face font-lock-string-face fontified t) 1958 2000 (fontified t) 2000 2007 (face font-lock-string-face fontified t) 2007 2069 (fontified t) 2069 2074 (face font-lock-string-face fontified t) 2074 2111 (fontified t) 2111 2122 (face font-lock-keyword-face fontified t) 2122 2123 (fontified t) 2123 2134 (face font-lock-constant-face fontified t) 2134 2137 (fontified t) 2137 2144 (face font-lock-builtin-face fontified t) 2144 2149 (fontified t) 2149 2156 (face font-lock-builtin-face fontified t) 2156 2159 (fontified t) 2159 2162 (face font-lock-comment-delimiter-face fontified t) 2162 2189 (face font-lock-comment-face fontified t) 2189 2192 (fontified t) 2192 2196 (face font-lock-keyword-face fontified t) 2196 2226 (fontified t) 2226 2228 (face font-lock-comment-delimiter-face fontified t) 2228 2265 (face font-lock-comment-face fontified t) 2265 2304 (fontified t) 2304 2306 (face font-lock-comment-delimiter-face fontified t) 2306 2346 (face font-lock-comment-face fontified t) 2346 2380 (fontified t) 2380 2383 (face font-lock-comment-delimiter-face fontified t) 2383 2419 (face font-lock-comment-face fontified t) 2419 2456 (fontified t) 2456 2459 (face font-lock-comment-delimiter-face fontified t) 2459 2522 (face font-lock-comment-face fontified t) 2522 2555 (fontified t) 2555 2558 (face font-lock-comment-delimiter-face fontified t) 2558 2580 (face font-lock-comment-face fontified t) 2580 2583 (fontified t) 2583 2587 (face font-lock-keyword-face fontified t) 2587 2615 (fontified t) 2615 2628 (face font-lock-string-face fontified t) 2628 2630 (fontified t) 2630 2632 (face font-lock-comment-delimiter-face fontified t) 2632 2678 (face font-lock-comment-face fontified t) 2678 2712 (fontified t) 2712 2715 (face font-lock-comment-delimiter-face fontified t) 2715 2772 (face font-lock-comment-face fontified t) 2772 2835 (fontified t) 2835 2842 (face font-lock-builtin-face fontified t) 2842 2850 (fontified t) 2850 2861 (face font-lock-keyword-face fontified t) 2861 2862 (fontified t) 2862 2875 (face font-lock-constant-face fontified t) 2875 2878 (fontified t) 2878 2885 (face font-lock-builtin-face fontified t) 2885 2890 (fontified t) 2890 2895 (face font-lock-builtin-face fontified t) 2895 2921 (fontified t) 2921 2932 (face font-lock-keyword-face fontified t) 2932 2933 (fontified t) 2933 2946 (face font-lock-constant-face fontified t) 2946 2949 (fontified t) 2949 2956 (face font-lock-builtin-face fontified t) 2956 2962 (fontified t) 2962 2973 (face font-lock-keyword-face fontified t) 2973 2974 (fontified t) 2974 2977 (face font-lock-constant-face fontified t) 2977 2980 (fontified t) 2980 2987 (face font-lock-builtin-face fontified t) 2987 2992 (fontified t) 2992 2997 (face font-lock-builtin-face fontified t) 2997 2999 (fontified t) 2999 3004 (face font-lock-string-face fontified t) 3004 3025 (fontified t) 3025 3036 (face font-lock-keyword-face fontified t) 3036 3037 (fontified t) 3037 3044 (face font-lock-constant-face fontified t) 3044 3047 (fontified t) 3047 3053 (face font-lock-builtin-face fontified t) 3053 3054 (fontified t face font-lock-builtin-face) 3054 3057 (fontified t) 3057 3059 (fontified t) 3059 3064 (face font-lock-builtin-face fontified t) 3064 3066 (fontified t) 3066 3071 (face font-lock-string-face fontified t) 3071 3093 (fontified t) 3093 3097 (face font-lock-keyword-face fontified t) 3097 3109 (fontified t) 3109 3111 (face font-lock-keyword-face fontified t) 3111 3180 (fontified t) 3180 3186 (face font-lock-keyword-face fontified t) 3186 3240 (fontified t) 3240 3245 (face font-lock-string-face fontified t) 3245 3313 (fontified t) 3313 3318 (face font-lock-string-face fontified t) 3318 3391 (fontified t) 3391 3394 (face font-lock-string-face fontified t) 3394 3461 (fontified t) 3461 3466 (face font-lock-string-face fontified t) 3466 3534 (fontified t) 3534 3537 (face font-lock-string-face fontified t) 3537 3607 (fontified t) 3607 3610 (face font-lock-string-face fontified t) 3610 3682 (fontified t) 3682 3685 (face font-lock-string-face fontified t) 3685 3761 (fontified t) 3761 3764 (face font-lock-string-face fontified t) 3764 3841 (fontified t) 3841 3844 (face font-lock-string-face fontified t) 3844 3878 (fontified t) 3878 3882 (face font-lock-keyword-face fontified t) 3882 3903 (fontified t) 3903 3914 (face font-lock-keyword-face fontified t) 3914 3915 (fontified t) 3915 3924 (face font-lock-constant-face fontified t) 3924 3927 (fontified t) 3927 3934 (face font-lock-builtin-face fontified t) 3934 3939 (fontified t) 3939 3946 (face font-lock-builtin-face fontified t) 3946 3976 (fontified t) 3976 3987 (face font-lock-keyword-face fontified t) 3987 3988 (fontified t) 3988 3995 (face font-lock-constant-face fontified t) 3995 3998 (fontified t) 3998 4005 (face font-lock-builtin-face fontified t) 4005 4010 (fontified t) 4010 4017 (face font-lock-builtin-face fontified t) 4017 4090 (fontified t) 4090 4101 (face font-lock-keyword-face fontified t) 4101 4102 (fontified t) 4102 4113 (face font-lock-constant-face fontified t) 4113 4116 (fontified t) 4116 4123 (face font-lock-builtin-face fontified t) 4123 4128 (fontified t) 4128 4135 (face font-lock-builtin-face fontified t) 4135 4167 (fontified t) 4167 4178 (face font-lock-keyword-face fontified t) 4178 4179 (fontified t) 4179 4196 (face font-lock-constant-face fontified t) 4196 4199 (fontified t) 4199 4206 (face font-lock-builtin-face fontified t) 4206 4212 (fontified t) 4212 4224 (face font-lock-keyword-face fontified t) 4224 4241 (fontified t) 4241 4252 (face font-lock-keyword-face fontified t) 4252 4253 (fontified t) 4253 4264 (face font-lock-constant-face fontified t) 4264 4266 (fontified t) 4266 4273 (face font-lock-builtin-face fontified t) 4273 4277 (fontified t) 4277 4284 (face font-lock-builtin-face fontified t) 4284 4312 (fontified t) 4312 4318 (face font-lock-keyword-face fontified t) 4318 4347 (fontified t) 4347 4348 (face font-lock-comment-delimiter-face fontified t) 4348 4370 (face font-lock-comment-face fontified t) 4370 4373 (face font-lock-comment-delimiter-face fontified t) 4373 4383 (face font-lock-comment-face fontified t) 4383 4386 (face font-lock-comment-delimiter-face fontified t) 4386 4397 (face font-lock-comment-face fontified t) 4397 4400 (face font-lock-comment-delimiter-face fontified t) 4400 4445 (face font-lock-comment-face fontified t) 4445 4448 (face font-lock-comment-delimiter-face fontified t) 4448 4456 (face font-lock-comment-face fontified t) 4456 4459 (face font-lock-comment-delimiter-face fontified t) 4459 4486 (face font-lock-comment-face fontified t) 4486 4489 (face font-lock-comment-delimiter-face fontified t) 4489 4517 (face font-lock-comment-face fontified t) 4517 4519 (fontified t) 4519 4523 (face font-lock-keyword-face fontified t) 4523 4548 (fontified t) 4548 4552 (face font-lock-keyword-face fontified t) 4552 4557 (fontified t) 4557 4576 (fontified t) 4576 4577 (fontified t) 4577 4581 (face font-lock-keyword-face fontified t) 4581 4608 (fontified t) 4608 4610 (face font-lock-string-face fontified t) 4610 4611 (fontified t) 4611 4639 (face font-lock-string-face fontified t) 4639 4722 (fontified t)) . 1516) (undo-tree-id231 . -4722) (undo-tree-id232 . -23) (undo-tree-id233 . -4722) (undo-tree-id234 . -210) (undo-tree-id235 . -4722) (undo-tree-id236 . -4210) (undo-tree-id237 . -4722) (undo-tree-id238 . -4722) (undo-tree-id239 . -23) (undo-tree-id240 . -4722) (undo-tree-id241 . -23) 6238 (t 25337 17947 479050 938000)) nil (25337 17982 664178 220000) 0 nil])
([nil nil ((1130 . 1446) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1130) (1090 . 1129) (#("
" 0 1 (fontified nil)) . -1090) (915 . 1091) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 487 (fontified nil)) . -642) (t 25337 17982 680147 126000)) nil (25337 18001 663556 122000) 0 nil])
([nil nil ((1130 . 1446) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1130) (1090 . 1129) (#("
" 0 1 (fontified nil)) . -1090) (915 . 1091) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 487 (fontified nil)) . -642) (t 25337 18001 680618 599000)) nil (25337 21558 56383 401000) 0 nil])
([nil nil ((1130 . 1446) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1130) (1090 . 1129) (#("
" 0 1 (fontified nil)) . -1090) (915 . 1091) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 487 (fontified nil)) . -642) (t 25337 21558 77271 993000)) nil (25337 21570 518637 241000) 0 nil])
([nil nil ((1130 . 1446) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1130) (1090 . 1129) (#("
" 0 1 (fontified nil)) . -1090) (915 . 1091) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 487 (fontified nil)) . -642) (t 25337 21570 540729 940000)) nil (25337 22099 283305 758000) 0 nil])
([nil nil ((1130 . 1446) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1130) (1090 . 1129) (#("
" 0 1 (fontified nil)) . -1090) (915 . 1091) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 487 (fontified nil)) . -642) (t 25337 22099 299231 176000)) nil (25337 23288 73089 980000) 0 nil])
([nil nil ((1130 . 1446) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1130) (1090 . 1129) (#("
" 0 1 (fontified nil)) . -1090) (915 . 1091) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 487 (fontified nil)) . -642) (t 25337 23288 92485 613000)) nil (25337 23413 38653 702000) 0 nil])
([nil nil ((1130 . 1446) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1130) (1090 . 1129) (#("
" 0 1 (fontified nil)) . -1090) (915 . 1091) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 487 (fontified nil)) . -642) (t 25337 23413 53457 270000)) nil (25337 23442 321134 905000) 0 nil])
([nil nil ((1130 . 1446) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1130) (1090 . 1129) (#("
" 0 1 (fontified nil)) . -1090) (915 . 1091) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 487 (fontified nil)) . -642) (t 25337 23442 337682 23000)) nil (25337 23819 156779 384000) 0 nil])
([nil nil ((1130 . 1446) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1130) (1090 . 1129) (#("
" 0 1 (fontified nil)) . -1090) (915 . 1091) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 487 (fontified nil)) . -642) (t 25337 23819 176521 369000)) nil (25337 23918 979503 746000) 0 nil])
([nil nil ((1130 . 1446) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1130) (1090 . 1129) (#("
" 0 1 (fontified nil)) . -1090) (915 . 1091) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 487 (fontified nil)) . -642) (t 25337 23918 997264 767000)) nil (25337 24446 575909 373000) 0 nil])
([nil nil ((1139 . 1455) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1139) (1099 . 1138) (#("
" 0 1 (fontified nil)) . -1099) (915 . 1100) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 487 (fontified nil)) . -642) (t 25337 24446 592624 376000)) nil (25339 57928 664244 438000) 0 nil])
([nil nil ((1139 . 1455) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1139) (1099 . 1138) (#("
" 0 1 (fontified nil)) . -1099) (915 . 1100) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(lsp-mode org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 496 (fontified nil)) . -642) (t 25339 57928 690395 140000)) nil (25344 48454 819909 394000) 0 nil])
([nil nil ((1139 . 1455) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1139) (1099 . 1138) (#("
" 0 1 (fontified nil)) . -1099) (915 . 1100) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(lsp-mode org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 496 (fontified nil)) . -642) (t 25344 48454 837590 954000)) nil (25345 11416 128461 782000) 0 nil])
([nil nil ((1139 . 1455) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1139) (1099 . 1138) (#("
" 0 1 (fontified nil)) . -1099) (915 . 1100) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(lsp-mode org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 496 (fontified nil)) . -642) (t 25345 11416 148926 317000)) nil (25345 13684 915673 473000) 0 nil])
([nil nil ((1139 . 1455) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1139) (1099 . 1138) (#("
" 0 1 (fontified nil)) . -1099) (915 . 1100) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(lsp-mode org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 496 (fontified nil)) . -642) (t 25345 13684 930978 71000)) nil (25345 13747 628825 463000) 0 nil])
([nil nil ((1139 . 1455) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1139) (1099 . 1138) (#("
" 0 1 (fontified nil)) . -1099) (915 . 1100) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(lsp-mode org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 496 (fontified nil)) . -642) (t 25345 13747 646141 325000)) nil (25345 16056 599251 515000) 0 nil])
([nil nil ((1151 . 1467) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1151) (1111 . 1150) (#("
" 0 1 (fontified nil)) . -1111) (915 . 1112) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(lsp-mode org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 496 (fontified nil)) . -642) (t 25345 16056 617533 407000)) nil (25345 16331 349777 436000) 0 nil])
([nil nil ((1151 . 1467) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1151) (1111 . 1150) (#("
" 0 1 (fontified nil)) . -1111) (915 . 1112) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(lorem-ipsum lsp-mode org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 508 (fontified nil)) . -642) (t 25345 16331 366212 340000)) nil (25345 29184 718064 648000) 0 nil])
([nil nil ((1151 . 1467) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1151) (1111 . 1150) (#("
" 0 1 (fontified nil)) . -1111) (915 . 1112) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(lorem-ipsum lsp-mode org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 508 (fontified nil)) . -642) (t 25345 29184 752804 583000)) nil (25346 9798 582728 251000) 0 nil])
([nil nil ((1151 . 1467) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1151) (1111 . 1150) (#("
" 0 1 (fontified nil)) . -1111) (915 . 1112) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(lorem-ipsum lsp-mode org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 508 (fontified nil)) . -642) (t 25346 9798 606636 898000)) nil (25347 19421 42937 809000) 0 nil])
([nil nil ((1151 . 1467) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1151) (1111 . 1150) (#("
" 0 1 (fontified nil)) . -1111) (915 . 1112) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(lorem-ipsum lsp-mode org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 508 (fontified nil)) . -642) (t 25347 19421 62807 279000)) nil (25347 64842 591416 755000) 0 nil])
([nil nil ((1151 . 1467) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1151) (1111 . 1150) (#("
" 0 1 (fontified nil)) . -1111) (915 . 1112) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(lorem-ipsum lsp-mode org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 508 (fontified nil)) . -642) (t 25347 64842 620116 291000)) nil (25348 2451 846503 457000) 0 nil])
([nil nil ((1151 . 1467) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1151) (1111 . 1150) (#("
" 0 1 (fontified nil)) . -1111) (915 . 1112) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(lorem-ipsum lsp-mode org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 508 (fontified nil)) . -642) (t 25348 2451 867613 552000)) nil (25348 46688 37550 810000) 0 nil])
([nil nil ((1151 . 1467) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1151) (1111 . 1150) (#("
" 0 1 (fontified nil)) . -1111) (915 . 1112) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(lorem-ipsum lsp-mode org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 508 (fontified nil)) . -642) (t 25348 46688 52397 497000)) nil (25350 3574 372466 688000) 0 nil])
([nil nil ((1151 . 1467) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1151) (1111 . 1150) (#("
" 0 1 (fontified nil)) . -1111) (915 . 1112) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(lorem-ipsum lsp-mode org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 508 (fontified nil)) . -642) (t 25350 3574 388984 754000)) nil (25350 41031 346880 273000) 0 nil])
([nil nil ((1151 . 1467) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1151) (1111 . 1150) (#("
" 0 1 (fontified nil)) . -1111) (915 . 1112) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(lorem-ipsum lsp-mode org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 508 (fontified nil)) . -642) (t 25350 41031 360638 374000)) nil (25350 45519 25262 349000) 0 nil])
([nil nil ((1151 . 1467) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1151) (1111 . 1150) (#("
" 0 1 (fontified nil)) . -1111) (915 . 1112) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(lorem-ipsum lsp-mode org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 508 (fontified nil)) . -642) (t 25350 45519 48459 436000)) nil (25355 59389 288204 272000) 0 nil])
([nil nil ((1151 . 1467) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1151) (1111 . 1150) (#("
" 0 1 (fontified nil)) . -1111) (915 . 1112) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(lorem-ipsum lsp-mode org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 508 (fontified nil)) . -642) (t 25355 59389 319733 776000)) nil (25355 59410 487174 660000) 0 nil])
([nil nil ((1151 . 1467) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1151) (1111 . 1150) (#("
" 0 1 (fontified nil)) . -1111) (915 . 1112) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(lorem-ipsum lsp-mode org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 508 (fontified nil)) . -642) (t 25355 59410 500365 172000)) nil (25355 59418 573644 839000) 0 nil])
([nil nil ((1151 . 1467) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1151) (1111 . 1150) (#("
" 0 1 (fontified nil)) . -1111) (915 . 1112) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(lorem-ipsum lsp-mode org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 508 (fontified nil)) . -642) (t 25355 59418 588603 307000)) nil (25355 59445 704921 348000) 0 nil])
([nil nil ((1151 . 1467) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1151) (1111 . 1150) (#("
" 0 1 (fontified nil)) . -1111) (915 . 1112) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(lorem-ipsum lsp-mode org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 508 (fontified nil)) . -642) (t 25355 59445 721390 561000)) nil (25355 62927 565688 54000) 0 nil])
([nil nil ((1151 . 1467) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1151) (1111 . 1150) (#("
" 0 1 (fontified nil)) . -1111) (915 . 1112) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(lorem-ipsum lsp-mode org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 508 (fontified nil)) . -642) (t 25355 62927 579737 661000)) nil (25355 63910 454317 535000) 0 nil])
([nil nil ((1151 . 1467) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1151) (1111 . 1150) (#("
" 0 1 (fontified nil)) . -1111) (915 . 1112) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(lorem-ipsum lsp-mode org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 508 (fontified nil)) . -642) (t 25355 63910 470852 480000)) nil (25356 44577 378396 787000) 0 nil])
([nil nil ((1151 . 1467) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1151) (1111 . 1150) (#("
" 0 1 (fontified nil)) . -1111) (915 . 1112) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(lorem-ipsum lsp-mode org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 508 (fontified nil)) . -642) (t 25356 44577 411668 965000)) nil (25357 10747 172680 172000) 0 nil])
([nil nil ((1151 . 1467) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1151) (1111 . 1150) (#("
" 0 1 (fontified nil)) . -1111) (915 . 1112) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(lorem-ipsum lsp-mode org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 508 (fontified nil)) . -642) (t 25357 10747 189524 232000)) nil (25357 19549 38292 469000) 0 nil])
([nil nil ((1151 . 1467) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1151) (1111 . 1150) (#("
" 0 1 (fontified nil)) . -1111) (915 . 1112) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(lorem-ipsum lsp-mode org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 508 (fontified nil)) . -642) (t 25357 19549 51691 670000)) nil (25357 64884 551434 414000) 0 nil])
([nil nil ((1151 . 1467) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1151) (1111 . 1150) (#("
" 0 1 (fontified nil)) . -1111) (915 . 1112) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(lorem-ipsum lsp-mode org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 508 (fontified nil)) . -642) (t 25357 64884 569416 456000)) nil (25358 42634 691158 509000) 0 nil])
([nil nil ((1151 . 1467) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1151) (1111 . 1150) (#("
" 0 1 (fontified nil)) . -1111) (915 . 1112) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(lorem-ipsum lsp-mode org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 508 (fontified nil)) . -642) (t 25358 42634 710075 924000)) nil (25358 43913 897782 965000) 0 nil])
([nil nil ((1151 . 1467) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1151) (1111 . 1150) (#("
" 0 1 (fontified nil)) . -1111) (915 . 1112) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(lorem-ipsum lsp-mode org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 508 (fontified nil)) . -642) (t 25358 43913 916858 677000)) nil (25358 44043 832158 539000) 0 nil])
([nil nil ((1151 . 1467) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1151) (1111 . 1150) (#("
" 0 1 (fontified nil)) . -1111) (915 . 1112) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(lorem-ipsum lsp-mode org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 508 (fontified nil)) . -642) (t 25358 44043 855996 646000)) nil (25358 44183 877860 800000) 0 nil])
([nil nil ((1151 . 1467) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1151) (1111 . 1150) (#("
" 0 1 (fontified nil)) . -1111) (915 . 1112) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(lorem-ipsum lsp-mode org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 508 (fontified nil)) . -642) (t 25358 44183 899439 843000)) nil (25358 44614 174990 79000) 0 nil])
([nil nil ((1151 . 1467) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1151) (1111 . 1150) (#("
" 0 1 (fontified nil)) . -1111) (915 . 1112) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(lorem-ipsum lsp-mode org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 508 (fontified nil)) . -642) (t 25358 44614 190276 352000)) nil (25358 44822 386058 641000) 0 nil])
([nil nil ((1151 . 1467) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1151) (1111 . 1150) (#("
" 0 1 (fontified nil)) . -1111) (915 . 1112) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(lorem-ipsum lsp-mode org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 508 (fontified nil)) . -642) (t 25358 44822 411604 758000)) nil (25359 61286 452082 225000) 0 nil])
([nil nil ((1151 . 1467) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1151) (1111 . 1150) (#("
" 0 1 (fontified nil)) . -1111) (915 . 1112) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(lorem-ipsum lsp-mode org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 508 (fontified nil)) . -642) (t 25359 61286 469243 668000)) nil (25359 62552 731472 182000) 0 nil])
([nil nil ((1151 . 1467) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1151) (1111 . 1150) (#("
" 0 1 (fontified nil)) . -1111) (915 . 1112) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(lorem-ipsum lsp-mode org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 508 (fontified nil)) . -642) (t 25359 62552 750115 369000)) nil (25364 43374 418636 253000) 0 nil])
([nil nil ((1151 . 1467) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1151) (1111 . 1150) (#("
" 0 1 (fontified nil)) . -1111) (915 . 1112) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(lorem-ipsum lsp-mode org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 508 (fontified nil)) . -642) (t 25364 43374 430798 259000)) nil (25364 43382 887252 646000) 0 nil])
([nil current ((1151 . 1467) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))" 0 316 (fontified nil)) . -1151) (1111 . 1150) (#("
" 0 1 (fontified nil)) . -1111) (915 . 1112) (#(" " 0 1 (fontified nil)) . 915) (642 . 916) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
	 '(lorem-ipsum lsp-mode org evil-org org-bullets tree-sitter-langs tree-sitter company undo-tree all-the-icons doom-themes evi counsel swiper evil ace-window which-key doom-modeline use-package))
 '(warning-suppress-types '((comp))))" 0 508 (fontified nil)) . -642) (t 25364 43382 906122 756000)) nil (25364 43467 865137 636000) 0 nil])
nil
